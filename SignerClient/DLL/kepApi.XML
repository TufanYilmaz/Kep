<?xml version="1.0"?>
<doc>
    <assembly>
        <name>kepApi</name>
    </assembly>
    <members>
        <member name="T:com.verion.AsyncOP">
            <summary>
            This is base class for asynchronous operation.
            </summary>
        </member>
        <member name="M:com.verion.AsyncOP.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:com.verion.AsyncOP.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:com.verion.AsyncOP.IsCompleted">
            <summary>
            Gets if asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:com.verion.AsyncOP.IsCompletedSynchronously">
            <summary>
            Gets if operation completed synchronously.
            </summary>
        </member>
        <member name="T:com.verion.AsyncOP_State">
            <summary>
            Specifies asynchronous operation state.
            </summary>
        </member>
        <member name="F:com.verion.AsyncOP_State.WaitingForStart">
            <summary>
            Operation waits for start.
            </summary>
        </member>
        <member name="F:com.verion.AsyncOP_State.Active">
            <summary>
            Operation processing is in progress.
            </summary>
        </member>
        <member name="F:com.verion.AsyncOP_State.Completed">
            <summary>
            Operations is completed.
            </summary>
        </member>
        <member name="F:com.verion.AsyncOP_State.Disposed">
            <summary>
            Operation is disposed.
            </summary>
        </member>
        <member name="T:com.verion.EventArgs`1">
            <summary>
            This class universal event arguments for transporting single value.
            </summary>
            <typeparam name="T">Event data.</typeparam>
        </member>
        <member name="M:com.verion.EventArgs`1.#ctor(`0)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">Event data.</param>
        </member>
        <member name="P:com.verion.EventArgs`1.Value">
            <summary>
            Gets event data.
            </summary>
        </member>
        <member name="T:com.verion.IAsyncOP">
            <summary>
            Represents asynchronous operation.
            </summary>
        </member>
        <member name="P:com.verion.IAsyncOP.State">
            <summary>
            Gets asynchronous operation state.
            </summary>
        </member>
        <member name="P:com.verion.IAsyncOP.Error">
            <summary>
            Gets error happened during operation. Returns null if no error.
            </summary>
        </member>
        <member name="T:com.verion.utils.IO.Base64">
            <summary>
            This class implements base64 encoder/decoder.  Defined in RFC 4648.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.Base64.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.Base64.Encode(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Encodes bytes.
            </summary>
            <param name="buffer">Data buffer.</param>
            <param name="offset">Offset in the buffer.</param>
            <param name="count">Number of bytes available in the buffer.</param>
            <param name="last">Last data block.</param>
            <returns>Returns encoded data.</returns>
        </member>
        <member name="M:com.verion.utils.IO.Base64.Decode(System.String,System.Boolean)">
            <summary>
            Decodes specified base64 string.
            </summary>
            <param name="value">Base64 string.</param>
            <param name="ignoreNonBase64Chars">If true all invalid base64 chars ignored. If false, FormatException is raised.</param>
            <returns>Returns decoded data.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:System.FormatException">Is raised when <b>value</b> contains invalid base64 data.</exception>
        </member>
        <member name="M:com.verion.utils.IO.Base64.Decode(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Decodes specified base64 data.
            </summary>
            <param name="data">Base64 encoded data buffer.</param>
            <param name="offset">Offset in the buffer.</param>
            <param name="count">Number of bytes available in the buffer.</param>
            <param name="ignoreNonBase64Chars">If true all invalid base64 chars ignored. If false, FormatException is raised.</param>
            <returns>Returns decoded data.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null reference.</exception>
            <exception cref="T:System.FormatException">Is raised when <b>value</b> contains invalid base64 data.</exception>
        </member>
        <member name="M:com.verion.utils.IO.Base64.Decode(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Decodes base64 encoded bytes.
            </summary>
            <param name="encBuffer">Base64 encoded data buffer.</param>
            <param name="encOffset">Offset in the encBuffer.</param>
            <param name="encCount">Number of bytes available in the encBuffer.</param>
            <param name="buffer">Buffer where to decode data.</param>
            <param name="offset">Offset int the buffer.</param>
            <param name="ignoreNonBase64Chars">If true all invalid base64 chars ignored. If false, FormatException is raised.</param>
            <returns>Returns number of bytes decoded.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>encBuffer</b> or <b>encBuffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the arguments has out of valid range.</exception>
            <exception cref="T:System.FormatException">Is raised when <b>encBuffer</b> contains invalid base64 data.</exception>
        </member>
        <member name="T:com.verion.utils.IO.Base64Stream">
            <summary>
            This class implements base64 encoder/decoder. Defined in RFC 4648.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.Base64Stream.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Stream which to encode/decode.</param>
            <param name="owner">Specifies if Base64Stream is owner of <b>stream</b>.</param>
            <param name="addLineBreaks">Specifies if encoder inserts CRLF after each 76 bytes.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.utils.IO.Base64Stream.#ctor(System.IO.Stream,System.Boolean,System.Boolean,System.IO.FileAccess)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Stream which to encode/decode.</param>
            <param name="owner">Specifies if Base64Stream is owner of <b>stream</b>.</param>
            <param name="addLineBreaks">Specifies if encoder inserts CRLF after each 76 bytes.</param>
            <param name="access">This stream access mode.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.utils.IO.Base64Stream.Dispose">
            <summary>
            Celans up any resources being used.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.Base64Stream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:com.verion.utils.IO.Base64Stream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:com.verion.utils.IO.Base64Stream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="M:com.verion.utils.IO.Base64Stream.Seek(System.Int64,System.IO.SeekOrigin)">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:com.verion.utils.IO.Base64Stream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the arguments has out of valid range.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when reading not supported.</exception>
        </member>
        <member name="M:com.verion.utils.IO.Base64Stream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encodes a sequence of bytes, writes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this.Finish has been called and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when reading not supported.</exception>
        </member>
        <member name="M:com.verion.utils.IO.Base64Stream.Finish">
            <summary>
            Completes encoding. Call this method if all data has written and no more data. 
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.Base64Stream.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.Base64Stream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.Base64Stream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.Base64Stream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.Base64Stream.Length">
            <summary>
            Gets the length in bytes of the stream.  This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.Base64Stream.Position">
            <summary>
            Gets or sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this property is accessed.</exception>
        </member>
        <member name="T:com.verion.utils.IO.DataSizeExceededException">
            <summary>
            The exception that is thrown when maximum allowed data size has exceeded.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.DataSizeExceededException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:com.verion.utils.IO.FifoBuffer">
            <summary>
            Implements FIFO(first in - first out) buffer.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.FifoBuffer.#ctor(System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="maxSize">Maximum number of bytes can buffer in FIFO.</param>
            <exception cref="T:System.ArgumentException">Is raised when </exception>
        </member>
        <member name="M:com.verion.utils.IO.FifoBuffer.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads up to specified count of bytes from the FIFO buffer.
            </summary>
            <param name="buffer">Buffer where to store data.</param>
            <param name="offset">Index in the buffer.</param>
            <param name="count">Maximum number of bytes to read.</param>
            <returns>Returns number of bytes readed. Returns 0 if no data in the buffer.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the arguments has out of allowed range.</exception>
        </member>
        <member name="M:com.verion.utils.IO.FifoBuffer.Write(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Writes specified number of bytes to the FIFO buffer.
            </summary>
            <param name="buffer">Data buffer.</param>
            <param name="offset">Index in the buffer.</param>
            <param name="count">Number of bytes to wrtite.</param>
            <param name="ignoreBufferFull">If true, disables excption raising when FIFO full.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the arguments has out of allowed range.</exception>
            <exception cref="T:com.verion.utils.IO.DataSizeExceededException">Is raised when ignoreBufferFull = false and FIFO buffer has no room to store data.</exception>
        </member>
        <member name="M:com.verion.utils.IO.FifoBuffer.Clear">
            <summary>
            Clears buffer data.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.FifoBuffer.TrimStart">
            <summary>
            Removes unused space from the buffer beginning.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.FifoBuffer.MaxSize">
            <summary>
            Gets maximum number of bytes can buffer in FIFO.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.FifoBuffer.Available">
            <summary>
            Gets number of bytes avialable in FIFO.
            </summary>
        </member>
        <member name="T:com.verion.utils.IO.IncompleteDataException">
            <summary>
            The exception that is thrown when incomplete data received.
            For example for ReadPeriodTerminated() method reaches end of stream before getting period terminator.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.IncompleteDataException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.IncompleteDataException.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="T:com.verion.utils.IO.JunkingStream">
            <summary>
            This stream just junks all written data.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.JunkingStream.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.JunkingStream.Flush">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.JunkingStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of the stream to the given value. This method always throws a NotSupportedException.
            </summary>
            <param name="offset">This parameter is not used.</param>
            <param name="origin">This parameter is not used.</param>
            <returns></returns>
        </member>
        <member name="M:com.verion.utils.IO.JunkingStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream. This method always throws a NotSupportedException.
            </summary>
            <param name="value">This parameter is not used.</param>
        </member>
        <member name="M:com.verion.utils.IO.JunkingStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the stream. This method always throws a NotSupportedException.
            </summary>
            <param name="buffer">This parameter is not used.</param>
            <param name="offset">This parameter is not used.</param>
            <param name="size">This parameter is not used.</param>
            <returns></returns>
        </member>
        <member name="M:com.verion.utils.IO.JunkingStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to the stream.
            </summary>
            <param name="buffer">An array of type Byte that contains the data to write to the stream.</param>
            <param name="offset">The location in buffer from which to start writing data.</param>
            <param name="size">The number of bytes to write to the stream.</param>
        </member>
        <member name="P:com.verion.utils.IO.JunkingStream.CanRead">
            <summary>
            Gets a value indicating whether the stream supports reading. This property always returns false.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.JunkingStream.CanSeek">
            <summary>
            Gets a value indicating whether the stream supports seeking. This property always returns false.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.JunkingStream.CanWrite">
            <summary>
            Gets a value that indicates whether the stream supports writing.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.JunkingStream.Length">
            <summary>
            Gets the length of the data available on the stream. This property always throws a NotSupportedException.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.JunkingStream.Position">
            <summary>
            Gets or sets the current position in the stream. This property always throws a NotSupportedException.
            </summary>
        </member>
        <member name="T:com.verion.utils.IO.LineSizeExceededException">
            <summary>
            The exception that is thrown when maximum allowed line size has exceeded.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.LineSizeExceededException.#ctor">
            <summary>
            Default coonstructor.
            </summary>
        </member>
        <member name="T:com.verion.utils.IO.MemoryStreamEx">
            <summary>
            This class represents auto switching memory/temp-file stream.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.MemoryStreamEx.#ctor(System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="memSize">Maximum bytes store to memory, before switching over temporary file.</param>
        </member>
        <member name="M:com.verion.utils.IO.MemoryStreamEx.Finalize">
            <summary>
            Destructor - Just incase user won't call dispose.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.MemoryStreamEx.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.MemoryStreamEx.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:com.verion.utils.IO.MemoryStreamEx.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:com.verion.utils.IO.MemoryStreamEx.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:com.verion.utils.IO.MemoryStreamEx.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.utils.IO.MemoryStreamEx.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
        </member>
        <member name="P:com.verion.utils.IO.MemoryStreamEx.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.MemoryStreamEx.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.MemoryStreamEx.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.MemoryStreamEx.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="M:com.verion.utils.IO.MemoryStreamEx.Seek(System.Int64,System.IO.SeekOrigin)">Is raised when this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.MemoryStreamEx.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="T:com.verion.utils.IO.MultiStream">
            <summary>
            This class combines multiple stream into one stream for reading.
            The most common usage for that stream is when you need to insert some data to the beginning of some stream.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.MultiStream.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.MultiStream.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.MultiStream.AppendStream(System.IO.Stream)">
            <summary>
            Appends this stream to read queue.
            </summary>
            <param name="stream">Stream to add.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:com.verion.utils.IO.MultiStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:com.verion.utils.IO.MultiStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:com.verion.utils.IO.MultiStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="M:com.verion.utils.IO.MultiStream.Seek(System.Int64,System.IO.SeekOrigin)">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:com.verion.utils.IO.MultiStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:com.verion.utils.IO.MultiStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.MultiStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.MultiStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.MultiStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.MultiStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when one of the source streams won't support <b>Length</b> property.</exception>
        </member>
        <member name="P:com.verion.utils.IO.MultiStream.Position">
            <summary>
            Gets or sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this property is accessed.</exception>
        </member>
        <member name="T:com.verion.utils.IO.PartialStream">
            <summary>
            Implements read-only stream what operates on specified range of source stream
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.PartialStream.#ctor(System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Source stream.</param>
            <param name="start">Zero based start positon in source stream.</param>
            <param name="length">Length of stream.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:com.verion.utils.IO.PartialStream.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.PartialStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:com.verion.utils.IO.PartialStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:com.verion.utils.IO.PartialStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:com.verion.utils.IO.PartialStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:com.verion.utils.IO.PartialStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.PartialStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.PartialStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.PartialStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.PartialStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="M:com.verion.utils.IO.PartialStream.Seek(System.Int64,System.IO.SeekOrigin)">Is raised when this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.PartialStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="T:com.verion.utils.IO.QuotedPrintableStream">
            <summary>
            Implements RFC 2045 6.7. Quoted-Printable stream.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.QuotedPrintableStream.#ctor(com.verion.utils.IO.SmartStream,System.IO.FileAccess)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Source stream.</param>
            <param name="access">Specifies stream access mode.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.utils.IO.QuotedPrintableStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:com.verion.utils.IO.QuotedPrintableStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:com.verion.utils.IO.QuotedPrintableStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:com.verion.utils.IO.QuotedPrintableStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when reading not supported.</exception>
        </member>
        <member name="M:com.verion.utils.IO.QuotedPrintableStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encodes a sequence of bytes, writes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when reading not supported.</exception>
        </member>
        <member name="P:com.verion.utils.IO.QuotedPrintableStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.QuotedPrintableStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.QuotedPrintableStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.QuotedPrintableStream.Length">
            <summary>
            Gets the length in bytes of the stream.  This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.QuotedPrintableStream.Position">
            <summary>
            Gets or sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this property is accessed.</exception>
        </member>
        <member name="T:com.verion.utils.IO.ReadWriteControlledStream">
            <summary>
            This class implements read,write or read-write access stream.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.ReadWriteControlledStream.#ctor(System.IO.Stream,System.IO.FileAccess)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Source stream.</param>
            <param name="access">This stream access mode.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.utils.IO.ReadWriteControlledStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:com.verion.utils.IO.ReadWriteControlledStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
        </member>
        <member name="M:com.verion.utils.IO.ReadWriteControlledStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
        </member>
        <member name="M:com.verion.utils.IO.ReadWriteControlledStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when reading not supported.</exception>
        </member>
        <member name="M:com.verion.utils.IO.ReadWriteControlledStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when reading not supported.</exception>
        </member>
        <member name="P:com.verion.utils.IO.ReadWriteControlledStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.ReadWriteControlledStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.ReadWriteControlledStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.ReadWriteControlledStream.Length">
            <summary>
            Gets the length in bytes of the stream.  This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.ReadWriteControlledStream.Position">
            <summary>
            Gets or sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="T:com.verion.utils.IO.SizeExceededAction">
            <summary>
            Specifies action what is done if requested action exceeds maximum allowed size.
            </summary>
        </member>
        <member name="F:com.verion.utils.IO.SizeExceededAction.ThrowException">
            <summary>
            Throws exception at once when maximum size exceeded.
            </summary>
        </member>
        <member name="F:com.verion.utils.IO.SizeExceededAction.JunkAndThrowException">
            <summary>
            Junks all data what exceeds maximum allowed size and after requested operation completes,
            throws exception.
            </summary>
        </member>
        <member name="T:com.verion.utils.IO.SmartStream">
            <summary>
            This class is wrapper to normal stream, provides most needed stream methods which are missing from normal stream.
            </summary>
        </member>
        <member name="T:com.verion.utils.IO.SmartStream.ReadLineAsyncOP">
            <summary>
            This class implements read line operation.
            </summary>
            <remarks>This class can be reused on multiple calls of <see cref="M:com.verion.utils.IO.SmartStream.ReadLine(com.verion.utils.IO.SmartStream.ReadLineAsyncOP,System.Boolean)">SmartStream.ReadLine</see> method.</remarks>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.ReadLineAsyncOP.#ctor(System.Byte[],com.verion.utils.IO.SizeExceededAction)">
            <summary>
            Default constructor.
            </summary>
            <param name="buffer">Line buffer.</param>
            <param name="exceededAction">Specifies how line-reader behaves when maximum line size exceeded.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.ReadLineAsyncOP.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.ReadLineAsyncOP.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.ReadLineAsyncOP.Start(System.Boolean,com.verion.utils.IO.SmartStream)">
            <summary>
            Starts reading line.
            </summary>
            <param name="async">If true then this method can complete asynchronously. If false, this method completed always syncronously.</param>
            <param name="stream">Owner SmartStream.</param>
            <returns>Returns true if read line completed synchronously, false if asynchronous operation pending.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.ReadLineAsyncOP.Buffering_Completed(System.Exception)">
            <summary>
            Is called when asynchronous read buffer buffering has completed.
            </summary>
            <param name="x">Exception that occured during async operation.</param>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.ReadLineAsyncOP.DoLineReading(System.Boolean)">
            <summary>
            Starts/continues line reading.
            </summary>
            <param name="async">If true then this method can complete asynchronously. If false, this method completed always syncronously.</param>
            <returns>Returns true if line reading completed.</returns>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.ReadLineAsyncOP.SetInfo(System.Int32,System.Exception)">
            <summary>
            Sets specified field values.
            </summary>
            <param name="bytesInBuffer">Number of bytes in buffer.</param>
            <param name="exception">Exception.</param>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadLineAsyncOP.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadLineAsyncOP.IsCompleted">
            <summary>
            Gets if asynchronous operation has completed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadLineAsyncOP.IsCompletedSynchronously">
            <summary>
            Gets if operation completed synchronously.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadLineAsyncOP.SizeExceededAction">
            <summary>
            Gets line size exceeded action.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadLineAsyncOP.Buffer">
            <summary>
            Gets line buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadLineAsyncOP.BytesInBuffer">
            <summary>
            Gets number of bytes stored in the buffer. Ending line-feed characters included.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadLineAsyncOP.LineBytesInBuffer">
            <summary>
            Gets number of line data bytes stored in the buffer. Ending line-feed characters not included.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadLineAsyncOP.LineAscii">
            <summary>
            Gets line as ASCII string. Returns null if EOS(end of stream) reached. Ending line-feed characters not included.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadLineAsyncOP.LineUtf8">
            <summary>
            Gets line as UTF-8 string. Returns null if EOS(end of stream) reached. Ending line-feed characters not included.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadLineAsyncOP.LineUtf32">
            <summary>
            Gets line as UTF-32 string. Returns null if EOS(end of stream) reached. Ending line-feed characters not included.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadLineAsyncOP.Error">
            <summary>
            Gets error occured during asynchronous operation. Value null means no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="E:com.verion.utils.IO.SmartStream.ReadLineAsyncOP.Completed">
            <summary>
            Is raised when asynchronous operation has completed.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.ReadLineAsyncOP.OnCompleted">
            <summary>
            Raises <b>Completed</b> event.
            </summary>
        </member>
        <member name="T:com.verion.utils.IO.SmartStream.ReadPeriodTerminatedAsyncOP">
            <summary>
            This class implements read period-terminated operation.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.ReadPeriodTerminatedAsyncOP.#ctor(System.IO.Stream,System.Int64,com.verion.utils.IO.SizeExceededAction)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Stream wehre to sore readed data.</param>
            <param name="maxCount">Maximum number of bytes to read. Value 0 means not limited.</param>
            <param name="exceededAction">Specifies how period-terminated reader behaves when <b>maxCount</b> exceeded.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Start(com.verion.utils.IO.SmartStream)">
            <summary>
            Starts period-terminated data reading.
            </summary>
            <param name="stream">Owner SmartStream.</param>
            <returns>Returns true if read line completed synchronously, false if asynchronous operation pending.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.ReadPeriodTerminatedAsyncOP.m_pReadLineOP_Completed(System.Object,com.verion.EventArgs{com.verion.utils.IO.SmartStream.ReadLineAsyncOP})">
            <summary>
            Is called when asynchronous line reading has completed.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.ReadPeriodTerminatedAsyncOP.DoRead">
            <summary>
            Continues period-terminated reading.
            </summary>
            <returns>Returns true if read line completed synchronously, false if asynchronous operation pending.</returns>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.ReadPeriodTerminatedAsyncOP.ProcessReadedLine">
            <summary>
            Processes readed line.
            </summary>
            <returns>Returns true if read period-terminated operation has completed.</returns>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadPeriodTerminatedAsyncOP.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadPeriodTerminatedAsyncOP.IsCompleted">
            <summary>
            Gets if asynchronous operation has completed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadPeriodTerminatedAsyncOP.IsCompletedSynchronously">
            <summary>
            Gets if operation completed synchronously.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Stream">
            <summary>
            Gets stream where period terminated data has stored.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadPeriodTerminatedAsyncOP.BytesStored">
            <summary>
            Gets number of bytes stored to <see cref="P:com.verion.utils.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Stream">Stream</see> stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadPeriodTerminatedAsyncOP.LinesStored">
            <summary>
            Gets number of lines stored to <see cref="P:com.verion.utils.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Stream">Stream</see> stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Error">
            <summary>
            Gets error occured during asynchronous operation. Value null means no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="E:com.verion.utils.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Completed">
            <summary>
            Is raised when asynchronous operation has completed.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.ReadPeriodTerminatedAsyncOP.OnCompleted">
            <summary>
            Raises <b>Completed</b> event.
            </summary>
        </member>
        <member name="T:com.verion.utils.IO.SmartStream.BufferReadAsyncOP">
            <summary>
            This class implements asynchronous read buffering.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.BufferReadAsyncOP.#ctor(com.verion.utils.IO.SmartStream)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner stream.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.BufferReadAsyncOP.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.BufferReadAsyncOP.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.BufferReadAsyncOP.Start(System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Starts asynchronous operation.
            </summary>
            <param name="async">If true then this method can complete asynchronously. If false, this method completed always syncronously.</param>
            <param name="buffer">Buffer where to store readed data.</param>
            <param name="count">Maximum number of bytes to read.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <returns>Returns true if operation completed synchronously, false if asynchronous operation pending.</returns>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.BufferReadAsyncOP.ReleaseEvents">
            <summary>
            Releases all events attached to this class.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.BufferReadAsyncOP.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.BufferReadAsyncOP.IsCompleted">
            <summary>
            Gets if asynchronous operation has completed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.BufferReadAsyncOP.IsCompletedSynchronously">
            <summary>
            Gets if operation completed synchronously.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.BufferReadAsyncOP.Buffer">
            <summary>
            Gets read buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.BufferReadAsyncOP.BytesInBuffer">
            <summary>
            Gets number of bytes stored in read buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.BufferReadAsyncOP.Error">
            <summary>
            Gets error occured during asynchronous operation. Value null means no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="E:com.verion.utils.IO.SmartStream.BufferReadAsyncOP.Completed">
            <summary>
            Is raised when asynchronous operation has completed.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.BufferReadAsyncOP.OnCompleted">
            <summary>
            Raises <b>Completed</b> event.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Stream to wrap.</param>
            <param name="owner">Specifies if SmartStream is owner of <b>stream</b>.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.ReadLine(com.verion.utils.IO.SmartStream.ReadLineAsyncOP,System.Boolean)">
            <summary>
            Begins line reading.
            </summary>
            <param name="op">Read line opeartion.</param>
            <param name="async">If true then this method can complete asynchronously. If false, this method completed always syncronously.</param>
            <returns>Returns true if read line completed synchronously, false if asynchronous operation pending.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.BeginReadHeader(System.IO.Stream,System.Int32,com.verion.utils.IO.SizeExceededAction,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous header reading from the source stream.
            </summary>
            <param name="storeStream">Stream where to store readed header.</param>
            <param name="maxCount">Maximum number of bytes to read. Value 0 means not limited.</param>
            <param name="exceededAction">Specifies action what is done if <b>maxCount</b> number of bytes has exceeded.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="state">An object that contains any additional user-defined data.</param>
            <returns>An IAsyncResult that represents the asynchronous call.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>storeStream</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.EndReadHeader(System.IAsyncResult)">
            <summary>
            Handles the end of an asynchronous header reading.
            </summary>
            <param name="asyncResult">An IAsyncResult that represents an asynchronous call.</param>
            <returns>Returns number of bytes stored to <b>storeStream</b>.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid <b>asyncResult</b> passed to this method.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when <b>EndReadLine</b> has already been called for specified <b>asyncResult</b>.</exception>
            <exception cref="T:com.verion.utils.IO.LineSizeExceededException">Is raised when source stream has too big line.</exception>
            <exception cref="T:com.verion.utils.IO.DataSizeExceededException">Is raised when reading exceeds <b>maxCount</b> specified value.</exception>
            <exception cref="T:com.verion.utils.IO.IncompleteDataException">Is raised when source stream closed before header-terminator reached.</exception>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.ReadHeader(System.IO.Stream,System.Int32,com.verion.utils.IO.SizeExceededAction)">
            <summary>
            Reads header from stream and stores to the specified <b>storeStream</b>.
            </summary>
            <param name="storeStream">Stream where to store readed header.</param>
            <param name="maxCount">Maximum number of bytes to read. Value 0 means not limited.</param>
            <param name="exceededAction">Specifies action what is done if <b>maxCount</b> number of bytes has exceeded.</param>
            <returns>Returns how many bytes readed from source stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>storeStream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:com.verion.utils.IO.LineSizeExceededException">Is raised when source stream has too big line.</exception>
            <exception cref="T:com.verion.utils.IO.DataSizeExceededException">Is raised when reading exceeds <b>maxCount</b> specified value.</exception>
            <exception cref="T:com.verion.utils.IO.IncompleteDataException">Is raised when source stream closed before header-terminator reached.</exception>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.ReadPeriodTerminated(com.verion.utils.IO.SmartStream.ReadPeriodTerminatedAsyncOP,System.Boolean)">
            <summary>
            Begins period-terminated data reading.
            </summary>
            <param name="op">Read period terminated opeartion.</param>
            <param name="async">If true then this method can complete asynchronously. If false, this method completed always syncronously.</param>
            <returns>Returns true if read line completed synchronously, false if asynchronous operation pending.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.BeginReadFixedCount(System.IO.Stream,System.Int64,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous data reading from the source stream.
            </summary>
            <param name="storeStream">Stream where to store readed header.</param>
            <param name="count">Number of bytes to read.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="state">An object that contains any additional user-defined data.</param>
            <returns>An IAsyncResult that represents the asynchronous call.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>storeStream</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.EndReadFixedCount(System.IAsyncResult)">
            <summary>
            Handles the end of an asynchronous data reading.
            </summary>
            <param name="asyncResult">An IAsyncResult that represents an asynchronous call.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid <b>asyncResult</b> passed to this method.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when <b>EndReadToStream</b> has already been called for specified <b>asyncResult</b>.</exception>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.ReadFixedCount(System.IO.Stream,System.Int64)">
            <summary>
            Reads specified number of bytes from source stream and writes to the specified stream.
            </summary>
            <param name="storeStream">Stream where to store readed data.</param>
            <param name="count">Number of bytes to read.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>storeStream</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.ReadFixedCountString(System.Int32)">
            <summary>
            Reads specified number of bytes from source stream and converts it to string with current encoding.
            </summary>
            <param name="count">Number of bytes to read.</param>
            <returns>Returns readed data as string.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.ReadAll(System.IO.Stream)">
            <summary>
            Reads all data from source stream and stores to the specified stream.
            </summary>
            <param name="stream">Stream where to store readed data.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.Peek">
            <summary>
            Returns the next available character but does not consume it.
            </summary>
            <returns>An integer representing the next character to be read, or -1 if no more characters are available.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.Write(System.String)">
            <summary>
            Writes specified string data to stream.
            </summary>
            <param name="data">Data to write.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null.</exception>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.WriteLine(System.String)">
            <summary>
            Writes specified line to stream. If CRLF is missing, it will be added automatically to line data.
            </summary>
            <param name="line">Line to send.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>line</b> is null.</exception>
            <returns>Returns number of raw bytes written.</returns>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.WriteStream(System.IO.Stream)">
            <summary>
            Writes all source <b>stream</b> data to stream.
            </summary>
            <param name="stream">Stream which data to write.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.WriteStream(System.IO.Stream,System.Int64)">
            <summary>
            Writes specified number of bytes from source <b>stream</b> to stream.
            </summary>
            <param name="stream">Stream which data to write.</param>
            <param name="count">Number of bytes to write.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when <b>count</b> argument has invalid value.</exception>
        </member>
        <member name="T:com.verion.utils.IO.SmartStream.WriteStreamAsyncOP">
            <summary>
            This class represents <see cref="M:com.verion.utils.IO.SmartStream.WriteStreamAsync(com.verion.utils.IO.SmartStream.WriteStreamAsyncOP)"/> asynchronous operation.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.WriteStreamAsyncOP.#ctor(System.IO.Stream,System.Int64)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Stream which data to write.</param>
            <param name="count">Number of bytes to write. Value -1 means all stream data will be written.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.WriteStreamAsyncOP.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.WriteStreamAsyncOP.Start(com.verion.utils.IO.SmartStream)">
            <summary>
            Starts operation processing.
            </summary>
            <param name="owner">Owner SmartStream.</param>
            <returns>Returns true if asynchronous operation in progress or false if operation completed synchronously.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.WriteStreamAsyncOP.SetState(com.verion.AsyncOP_State)">
            <summary>
            Sets operation state.
            </summary>
            <param name="state">New state.</param>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.WriteStreamAsyncOP.BeginReadData">
            <summary>
            Starts reading data.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.WriteStreamAsyncOP.ProcessReadDataResult(System.IAsyncResult)">
            <summary>
            Processes read data result.
            </summary>
            <param name="readResult">Asynchronous result.</param>
            <returns>Retruns true if this method completed asynchronously, otherwise false.</returns>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.WriteStreamAsyncOP.State">
            <summary>
            Gets asynchronous operation state.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.WriteStreamAsyncOP.Error">
            <summary>
            Gets error happened during operation. Returns null if no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOP_State.Completed</b> state.</exception>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.WriteStreamAsyncOP.BytesWritten">
            <summary>
            Gets number of bytes written.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOP_State.Completed</b> state.</exception>
        </member>
        <member name="E:com.verion.utils.IO.SmartStream.WriteStreamAsyncOP.CompletedAsync">
            <summary>
            Is called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.WriteStreamAsyncOP.OnCompletedAsync">
            <summary>
            Raises <b>CompletedAsync</b> event.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.WriteStreamAsync(com.verion.utils.IO.SmartStream.WriteStreamAsyncOP)">
            <summary>
            Starts writing stream data to this stream.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <returns>Returns true if aynchronous operation is pending (The <see cref="E:com.verion.utils.IO.SmartStream.WriteStreamAsyncOP.CompletedAsync"/> event is raised upon completion of the operation).
            Returns false if operation completed synchronously.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.WritePeriodTerminated(System.IO.Stream)">
            <summary>
            Writes period handled and terminated data to this stream.
            </summary>
            <param name="stream">Source stream. Reading starts from stream current location.</param>
            <returns>Returns number of bytes written to stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
            <exception cref="T:com.verion.utils.IO.LineSizeExceededException">Is raised when <b>stream</b> has too big line.</exception>        
        </member>
        <member name="T:com.verion.utils.IO.SmartStream.WritePeriodTerminatedAsyncOP">
            <summary>
            This class represents <see cref="M:com.verion.utils.IO.SmartStream.WritePeriodTerminatedAsync(com.verion.utils.IO.SmartStream.WritePeriodTerminatedAsyncOP)"/> asynchronous operation.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.WritePeriodTerminatedAsyncOP.#ctor(System.IO.Stream)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Source stream. Reading starts from stream current location.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.WritePeriodTerminatedAsyncOP.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.WritePeriodTerminatedAsyncOP.Start(com.verion.utils.IO.SmartStream)">
            <summary>
            Starts operation processing.
            </summary>
            <param name="owner">Owner SmartStream.</param>
            <returns>Returns true if asynchronous operation in progress or false if operation completed synchronously.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.WritePeriodTerminatedAsyncOP.SetState(com.verion.AsyncOP_State)">
            <summary>
            Sets operation state.
            </summary>
            <param name="state">New state.</param>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.WritePeriodTerminatedAsyncOP.ReadLineCompleted(com.verion.utils.IO.SmartStream.ReadLineAsyncOP)">
            <summary>
            Is called when source stream read line reading has completed.
            </summary>
            <param name="op">Asynchronous operation.</param>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.WritePeriodTerminatedAsyncOP.SendLineCompleted(System.IAsyncResult)">
            <summary>
            Is called when line sending has completed.
            </summary>
            <param name="ar">Asynchronous result.</param>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.WritePeriodTerminatedAsyncOP.SendTerminatorCompleted(System.IAsyncResult)">
            <summary>
            Is called when ".CRLF" or "CRLF.CRLF" terminator sending has completed.
            </summary>
            <param name="ar">Asynchronous result.</param>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.WritePeriodTerminatedAsyncOP.State">
            <summary>
            Gets asynchronous operation state.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.WritePeriodTerminatedAsyncOP.Error">
            <summary>
            Gets error happened during operation. Returns null if no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOP_State.Completed</b> state.</exception>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.WritePeriodTerminatedAsyncOP.BytesWritten">
            <summary>
            Gets number of bytes written.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOP_State.Completed</b> state.</exception>
        </member>
        <member name="E:com.verion.utils.IO.SmartStream.WritePeriodTerminatedAsyncOP.CompletedAsync">
            <summary>
            Is called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.WritePeriodTerminatedAsyncOP.OnCompletedAsync">
            <summary>
            Raises <b>CompletedAsync</b> event.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.WritePeriodTerminatedAsync(com.verion.utils.IO.SmartStream.WritePeriodTerminatedAsyncOP)">
            <summary>
            Starts writing period handled and terminated data to this stream.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <returns>Returns true if aynchronous operation is pending (The <see cref="E:com.verion.utils.IO.SmartStream.WritePeriodTerminatedAsyncOP.CompletedAsync"/> event is raised upon completion of the operation).
            Returns false if operation completed synchronously.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.WriteHeader(System.IO.Stream)">
            <summary>
            Reads header from source <b>stream</b> and writes it to stream.
            </summary>
            <param name="stream">Stream from where to read header.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous read operation.
            </summary>
            <param name="buffer">The buffer to read the data into.</param>
            <param name="offset">The byte offset in buffer at which to begin writing data read from the stream.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An IAsyncResult that represents the asynchronous read, which could still be pending.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the arguments has out of valid range.</exception>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.EndRead(System.IAsyncResult)">
            <summary>
            Handles the end of an asynchronous data reading.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
            <returns>The total number of bytes read into the <b>buffer</b>. This can be less than the number of bytes requested 
            if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the arguments has out of valid range.</exception>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous write operation.
            </summary>
            <param name="buffer">The buffer to write data from.</param>
            <param name="offset">The byte offset in buffer from which to begin writing.</param>
            <param name="count">The maximum number of bytes to write.</param>
            <param name="callback">An optional asynchronous callback, to be called when the write is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests.</param>
            <returns>An IAsyncResult that represents the asynchronous write, which could still be pending.</returns>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.EndWrite(System.IAsyncResult)">
            <summary>
            Ends an asynchronous write operation.
            </summary>
            <param name="asyncResult">A reference to the outstanding asynchronous I/O request.</param>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.BufferRead(System.Boolean,com.verion.utils.IO.SmartStream.BufferCallback)">
            <summary>
            Begins buffering read-buffer.
            </summary>
            <param name="async">If true then this method can complete asynchronously. If false, this method completed always syncronously.</param>
            <param name="asyncCallback">The callback that is executed when asynchronous operation completes. 
            If operation completes synchronously, no callback called.</param>
            <returns>
            Returns true if the I/O operation is pending. The BufferReadAsyncEventArgs.Completed event on the context parameter will be raised upon completion of the operation. 
            Returns false if the I/O operation completed synchronously. The BufferReadAsyncEventArgs.Completed event on the context parameter will not be raised and the context object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation. 
            </returns>
            <exception cref="T:System.InvalidOperationException">Is raised when there is data in read buffer and this method is called.</exception>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.SourceStream">
            <summary>
            Gets this stream underlying stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.IsOwner">
            <summary>
            Gets if SmartStream is owner of source stream. This property affects like closing this stream will close SourceStream if IsOwner true.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.LastActivity">
            <summary>
            Gets the last time when data was read or written.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.BytesReaded">
            <summary>
            Gets how many bytes are readed through this stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.BytesWritten">
            <summary>
            Gets how many bytes are written through this stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.BytesInReadBuffer">
            <summary>
            Gets number of bytes in read buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.Encoding">
            <summary>
            Gets or sets string related methods default encoding.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when null value is passed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="T:com.verion.utils.IO.SmartStream.ReadLineAsyncOperation">
            <summary>
            This class implements asynchronous line reading.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.ReadLineAsyncOperation.#ctor(com.verion.utils.IO.SmartStream,System.Byte[],System.Int32,System.Int32,com.verion.utils.IO.SizeExceededAction,System.AsyncCallback,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner stream.</param>
            <param name="buffer">Buffer where to store data.</param>
            <param name="offset">The location in <b>buffer</b> to begin storing the data.</param>
            <param name="maxCount">Maximum number of bytes to read.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum line size exceeded.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="asyncState">User-defined object that qualifies or contains information about an asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b>,<b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the arguments has out of valid range.</exception>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.ReadLineAsyncOperation.Buffering_Completed(System.Exception)">
            <summary>
            Is called when asynchronous read buffer buffering has completed.
            </summary>
            <param name="x">Exception that occured during async operation.</param>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.ReadLineAsyncOperation.DoLineReading">
            <summary>
            Does line reading.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.ReadLineAsyncOperation.Completed">
            <summary>
            This method must be called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadLineAsyncOperation.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadLineAsyncOperation.AsyncWaitHandle">
            <summary>
            Gets a WaitHandle that is used to wait for an asynchronous operation to complete.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadLineAsyncOperation.CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadLineAsyncOperation.IsCompleted">
            <summary>
            Gets an indication whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadLineAsyncOperation.IsEndCalled">
            <summary>
            Gets or sets if <b>EndReadLine</b> method is called for this asynchronous operation.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadLineAsyncOperation.Buffer">
            <summary>
            Gets store buffer.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadLineAsyncOperation.BytesReaded">
            <summary>
            Gets number of bytes readed from source stream.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadLineAsyncOperation.BytesStored">
            <summary>
            Gets number of bytes stored in to <b>Buffer</b>.
            </summary>
        </member>
        <member name="T:com.verion.utils.IO.SmartStream.ReadToTerminatorAsyncOperation">
            <summary>
            This class implements asynchronous line-based terminated data reader, where terminator is on line itself.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.ReadToTerminatorAsyncOperation.#ctor(com.verion.utils.IO.SmartStream,System.String,System.IO.Stream,System.Int64,com.verion.utils.IO.SizeExceededAction,System.AsyncCallback,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner stream.</param>
            <param name="terminator">Data terminator.</param>
            <param name="storeStream">Stream where to store readed header.</param>
            <param name="maxCount">Maximum number of bytes to read. Value 0 means not limited.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum line size exceeded.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="asyncState">User-defined object that qualifies or contains information about an asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b>,<b>terminator</b> or <b>storeStream</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.ReadToTerminatorAsyncOperation.ReadLine_Completed(System.IAsyncResult)">
            <summary>
            This method is called when asyynchronous line reading has completed.
            </summary>
            <param name="asyncResult">An IAsyncResult that represents an asynchronous call.</param>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.ReadToTerminatorAsyncOperation.Completed">
            <summary>
            This method must be called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadToTerminatorAsyncOperation.Terminator">
            <summary>
            Gets terminator.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadToTerminatorAsyncOperation.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadToTerminatorAsyncOperation.AsyncWaitHandle">
            <summary>
            Gets a WaitHandle that is used to wait for an asynchronous operation to complete.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadToTerminatorAsyncOperation.CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadToTerminatorAsyncOperation.IsCompleted">
            <summary>
            Gets an indication whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadToTerminatorAsyncOperation.IsEndCalled">
            <summary>
            Gets or sets if <b>EndReadLine</b> method is called for this asynchronous operation.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadToTerminatorAsyncOperation.BytesStored">
            <summary>
            Gets number of bytes stored in to <b>storeStream</b>.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadToTerminatorAsyncOperation.Exception">
            <summary>
            Gets exception happened on asynchronous operation. Returns null if operation was successfull.
            </summary>
        </member>
        <member name="T:com.verion.utils.IO.SmartStream.ReadToStreamAsyncOperation">
            <summary>
            This class implements asynchronous read to stream data reader.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.ReadToStreamAsyncOperation.#ctor(com.verion.utils.IO.SmartStream,System.IO.Stream,System.Int64,System.AsyncCallback,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner stream.</param>
            <param name="storeStream">Stream where to store readed data.</param>
            <param name="count">Number of bytes to read from source stream.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="asyncState">User-defined object that qualifies or contains information about an asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> or <b>storeStream</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.ReadToStreamAsyncOperation.Buffering_Completed(System.Exception)">
            <summary>
            Is called when asynchronous read buffer buffering has completed.
            </summary>
            <param name="x">Exception that occured during async operation.</param>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.ReadToStreamAsyncOperation.DoDataReading">
            <summary>
            Does data reading.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.ReadToStreamAsyncOperation.Completed">
            <summary>
            This method must be called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadToStreamAsyncOperation.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadToStreamAsyncOperation.AsyncWaitHandle">
            <summary>
            Gets a WaitHandle that is used to wait for an asynchronous operation to complete.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadToStreamAsyncOperation.CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadToStreamAsyncOperation.IsCompleted">
            <summary>
            Gets an indication whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadToStreamAsyncOperation.IsEndCalled">
            <summary>
            Gets or sets if <b>EndReadLine</b> method is called for this asynchronous operation.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadToStreamAsyncOperation.BytesStored">
            <summary>
            Gets number of bytes stored in to <b>storeStream</b>.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadToStreamAsyncOperation.Exception">
            <summary>
            Gets exception happened on asynchronous operation. Returns null if operation was successfull.
            </summary>
        </member>
        <member name="T:com.verion.utils.IO.SmartStream.ReadAsyncOperation">
            <summary>
            This class implements asynchronous data reader.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.ReadAsyncOperation.#ctor(com.verion.utils.IO.SmartStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner stream.</param>
            <param name="buffer">Buffer where to store data.</param>
            <param name="offset">The location in <b>buffer</b> to begin storing the data.</param>
            <param name="maxSize">Maximum number of bytes to read.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="asyncState">User-defined object that qualifies or contains information about an asynchronous operation.</param>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.ReadAsyncOperation.Buffering_Completed(System.Exception)">
            <summary>
            Is called when asynchronous read buffer buffering has completed.
            </summary>
            <param name="x">Exception that occured during async operation.</param>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.ReadAsyncOperation.DoRead">
            <summary>
            Does asynchronous data reading.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.ReadAsyncOperation.Completed">
            <summary>
            This method must be called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadAsyncOperation.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadAsyncOperation.AsyncWaitHandle">
            <summary>
            Gets a WaitHandle that is used to wait for an asynchronous operation to complete.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadAsyncOperation.CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadAsyncOperation.IsCompleted">
            <summary>
            Gets an indication whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadAsyncOperation.IsEndCalled">
            <summary>
            Gets or sets if <b>EndReadLine</b> method is called for this asynchronous operation.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadAsyncOperation.Buffer">
            <summary>
            Gets store buffer.
            </summary>
        </member>
        <member name="P:com.verion.utils.IO.SmartStream.ReadAsyncOperation.BytesStored">
            <summary>
            Gets number of bytes stored in to <b>Buffer</b>.
            </summary>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.BeginReadLine(System.Byte[],System.Int32,System.Int32,com.verion.utils.IO.SizeExceededAction,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous line reading from the source stream.
            </summary>
            <param name="buffer">Buffer where to store readed line data.</param>
            <param name="offset">The location in <b>buffer</b> to begin storing the data.</param>
            <param name="maxCount">Maximum number of bytes to read.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum line size exceeded.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="state">An object that contains any additional user-defined data.</param>
            <returns>An IAsyncResult that represents the asynchronous call.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:com.verion.utils.IO.SmartStream.EndReadLine(System.IAsyncResult)">
            <summary>
            Handles the end of an asynchronous line reading.
            </summary>
            <param name="asyncResult">An IAsyncResult that represents an asynchronous call.</param>
            <returns>Returns number of bytes stored to <b>buffer</b>. Returns -1 if no more data, end of stream reached.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid <b>asyncResult</b> passed to this method.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when <b>EndReadLine</b> has already been called for specified <b>asyncResult</b>.</exception>
            <exception cref="T:com.verion.utils.IO.LineSizeExceededException">Is raised when <b>maxCount</b> value is exceeded.</exception>        
        </member>
        <member name="T:com.verion.utils.Log.LogEntry">
            <summary>
            Implements log entry.
            </summary>
        </member>
        <member name="M:com.verion.utils.Log.LogEntry.#ctor(com.verion.utils.Log.LogEntryType,System.String,System.Int64,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="type">Log entry type.</param>
            <param name="id">Log entry ID.</param>
            <param name="size">Specified how much data was readed or written.</param>
            <param name="text">Description text.</param>
        </member>
        <member name="M:com.verion.utils.Log.LogEntry.#ctor(com.verion.utils.Log.LogEntryType,System.String,System.Security.Principal.GenericIdentity,System.Int64,System.String,System.Net.IPEndPoint,System.Net.IPEndPoint,System.Byte[])">
            <summary>
            Default constructor.
            </summary>
            <param name="type">Log entry type.</param>
            <param name="id">Log entry ID.</param>
            <param name="userIdentity">Log entry owner user or null if none.</param>
            <param name="size">Log entry read/write size in bytes.</param>
            <param name="text">Log text.</param>
            <param name="localEP">Local IP end point.</param>
            <param name="remoteEP">Remote IP end point.</param>
            <param name="data">Log data.</param>
        </member>
        <member name="M:com.verion.utils.Log.LogEntry.#ctor(com.verion.utils.Log.LogEntryType,System.String,System.Security.Principal.GenericIdentity,System.Int64,System.String,System.Net.IPEndPoint,System.Net.IPEndPoint,System.Exception)">
            <summary>
            Default constructor.
            </summary>
            <param name="type">Log entry type.</param>
            <param name="id">Log entry ID.</param>
            <param name="userIdentity">Log entry owner user or null if none.</param>
            <param name="size">Log entry read/write size in bytes.</param>
            <param name="text">Log text.</param>
            <param name="localEP">Local IP end point.</param>
            <param name="remoteEP">Remote IP end point.</param>
            <param name="exception">Exception happened. Can be null.</param>
        </member>
        <member name="P:com.verion.utils.Log.LogEntry.EntryType">
            <summary>
            Gets log entry type.
            </summary>
        </member>
        <member name="P:com.verion.utils.Log.LogEntry.ID">
            <summary>
            Gets log entry ID.
            </summary>
        </member>
        <member name="P:com.verion.utils.Log.LogEntry.Time">
            <summary>
            Gets time when log entry was created.
            </summary>
        </member>
        <member name="P:com.verion.utils.Log.LogEntry.UserIdentity">
            <summary>
            Gets log entry related user identity.
            </summary>
        </member>
        <member name="P:com.verion.utils.Log.LogEntry.Size">
            <summary>
            Gets how much data was readed or written, depends on <b>LogEntryType</b>.
            </summary>
        </member>
        <member name="P:com.verion.utils.Log.LogEntry.Text">
            <summary>
            Gets describing text.
            </summary>
        </member>
        <member name="P:com.verion.utils.Log.LogEntry.Exception">
            <summary>
            Gets exception happened. This property is available only if LogEntryType.Exception.
            </summary>
        </member>
        <member name="P:com.verion.utils.Log.LogEntry.LocalEndPoint">
            <summary>
            Gets local IP end point. Value null means no local end point.
            </summary>
        </member>
        <member name="P:com.verion.utils.Log.LogEntry.RemoteEndPoint">
            <summary>
            Gets remote IP end point. Value null means no remote end point.
            </summary>
        </member>
        <member name="P:com.verion.utils.Log.LogEntry.Data">
            <summary>
            Gest log data. Value null means no log data.
            </summary>
        </member>
        <member name="T:com.verion.utils.Log.LogEntryType">
            <summary>
            Specifies log entry type.
            </summary>
        </member>
        <member name="F:com.verion.utils.Log.LogEntryType.Read">
            <summary>
            Read entry.
            </summary>
        </member>
        <member name="F:com.verion.utils.Log.LogEntryType.Write">
            <summary>
            Write entry.
            </summary>
        </member>
        <member name="F:com.verion.utils.Log.LogEntryType.Text">
            <summary>
            Text entry.
            </summary>
        </member>
        <member name="F:com.verion.utils.Log.LogEntryType.Exception">
            <summary>
            Exception entry.
            </summary>
        </member>
        <member name="T:com.verion.utils.Log.Logger">
            <summary>
            General logging module.
            </summary>
        </member>
        <member name="M:com.verion.utils.Log.Logger.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:com.verion.utils.Log.Logger.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:com.verion.utils.Log.Logger.AddRead(System.Int64,System.String)">
            <summary>
            Adds read log entry.
            </summary>
            <param name="size">Readed data size in bytes.</param>
            <param name="text">Log text.</param>
        </member>
        <member name="M:com.verion.utils.Log.Logger.AddRead(System.String,System.Security.Principal.GenericIdentity,System.Int64,System.String,System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>
            Adds read log entry.
            </summary>
            <param name="id">Log entry ID.</param>
            <param name="size">Readed data size in bytes.</param>
            <param name="text">Log text.</param>
            <param name="userIdentity">Authenticated user identity.</param>
            <param name="localEP">Local IP endpoint.</param>
            <param name="remoteEP">Remote IP endpoint.</param>
        </member>
        <member name="M:com.verion.utils.Log.Logger.AddRead(System.String,System.Security.Principal.GenericIdentity,System.Int64,System.String,System.Net.IPEndPoint,System.Net.IPEndPoint,System.Byte[])">
            <summary>
            Adds read log entry.
            </summary>
            <param name="id">Log entry ID.</param>
            <param name="size">Readed data size in bytes.</param>
            <param name="text">Log text.</param>
            <param name="userIdentity">Authenticated user identity.</param>
            <param name="localEP">Local IP endpoint.</param>
            <param name="remoteEP">Remote IP endpoint.</param>
            <param name="data">Log data.</param>
        </member>
        <member name="M:com.verion.utils.Log.Logger.AddWrite(System.Int64,System.String)">
            <summary>
            Add write log entry.
            </summary>
            <param name="size">Written data size in bytes.</param>
            <param name="text">Log text.</param>
        </member>
        <member name="M:com.verion.utils.Log.Logger.AddWrite(System.String,System.Security.Principal.GenericIdentity,System.Int64,System.String,System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>
            Add write log entry.
            </summary>
            <param name="id">Log entry ID.</param>
            <param name="size">Written data size in bytes.</param>
            <param name="text">Log text.</param>
            <param name="userIdentity">Authenticated user identity.</param>
            <param name="localEP">Local IP endpoint.</param>
            <param name="remoteEP">Remote IP endpoint.</param>
        </member>
        <member name="M:com.verion.utils.Log.Logger.AddWrite(System.String,System.Security.Principal.GenericIdentity,System.Int64,System.String,System.Net.IPEndPoint,System.Net.IPEndPoint,System.Byte[])">
            <summary>
            Add write log entry.
            </summary>
            <param name="id">Log entry ID.</param>
            <param name="size">Written data size in bytes.</param>
            <param name="text">Log text.</param>
            <param name="userIdentity">Authenticated user identity.</param>
            <param name="localEP">Local IP endpoint.</param>
            <param name="remoteEP">Remote IP endpoint.</param>
            <param name="data">Log data.</param>
        </member>
        <member name="M:com.verion.utils.Log.Logger.AddText(System.String)">
            <summary>
            Adds text entry.
            </summary>
            <param name="text">Log text.</param>
        </member>
        <member name="M:com.verion.utils.Log.Logger.AddText(System.String,System.String)">
            <summary>
            Adds text entry.
            </summary>
            <param name="id">Log entry ID.</param>
            <param name="text">Log text.</param>
        </member>
        <member name="M:com.verion.utils.Log.Logger.AddText(System.String,System.Security.Principal.GenericIdentity,System.String,System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>
            Adds text entry.
            </summary>
            <param name="id">Log entry ID.</param>
            <param name="text">Log text.</param>
            <param name="userIdentity">Authenticated user identity.</param>
            <param name="localEP">Local IP endpoint.</param>
            <param name="remoteEP">Remote IP endpoint.</param>
        </member>
        <member name="M:com.verion.utils.Log.Logger.AddException(System.String,System.Security.Principal.GenericIdentity,System.String,System.Net.IPEndPoint,System.Net.IPEndPoint,System.Exception)">
            <summary>
            Adds exception entry.
            </summary>
            <param name="id">Log entry ID.</param>
            <param name="text">Log text.</param>
            <param name="userIdentity">Authenticated user identity.</param>
            <param name="localEP">Local IP endpoint.</param>
            <param name="remoteEP">Remote IP endpoint.</param>
            <param name="exception">Exception happened.</param>
        </member>
        <member name="E:com.verion.utils.Log.Logger.WriteLog">
            <summary>
            Is raised when new log entry is available.
            </summary>
        </member>
        <member name="M:com.verion.utils.Log.Logger.OnWriteLog(com.verion.utils.Log.LogEntry)">
            <summary>
            Raises WriteLog event.
            </summary>
            <param name="entry">Log entry.</param>
        </member>
        <member name="T:com.verion.utils.Log.WriteLogEventArgs">
            <summary>
            This class provides data for <b>Logger.WriteLog</b> event.
            </summary>
        </member>
        <member name="M:com.verion.utils.Log.WriteLogEventArgs.#ctor(com.verion.utils.Log.LogEntry)">
            <summary>
            Default constructor.
            </summary>
            <param name="logEntry">New log entry.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>logEntry</b> is null.</exception>
        </member>
        <member name="P:com.verion.utils.Log.WriteLogEventArgs.LogEntry">
            <summary>
            Gets new log entry.
            </summary>
        </member>
        <member name="T:com.verion.uniApi.KEP_Mail_Message">
            <summary>
             Bu sinif Kayıtlı Elektronik Posta Sistemine İlişkin Usul ve Esaslar Hakkında Yönetmelige ve ETSI TS 102 640 uyumlu, 
             KEP iletisi oluşturmak amacıyla hazırlanmıştır.<br/><br/>
            
             Kep ileti olusturulurken temel ve gerekli alanlar methodlar eklenmistir.
             
              <br/><br/>
            
            </summary>
        </member>
        <member name="F:com.verion.uniApi.KEP_Mail_Message.kep_imza">
            <summary>
             Imzalama islemi
            </summary>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Message.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Message.cleanKEPMessageContents">
            <summary>
             KEP Icerik bilgilerini temizler. Imzalama ile ilgili olan parametreler kalir.
            </summary>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Message.permitTestKEPAddress(System.Boolean)">
            <summary>
            API FROM  alanlarinda kep adres kontrolunde "kep.tr" uzantili posta adres kontrolu yapar.
            "True" olarak set ettiginizde kep.tr alan adi kontrolu yapmaz. Varsayilan deger "false" dur.
            </summary>
            <param name="isTestKepAddress">(boolean) Test alan adı uzantılı adres girilsin mi?.</param>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Message.getTestKEPAddressStatus">
            <summary>
            API FROM alanlarinda kep adres kontrolunde "kep.tr" uzantili posta adres kontrolu yapar.
            Mevcut durumu ile ilgili bilgi verir. False: izin verilmiyor, True: Izin verilmis
            </summary>
            <returns>(boolean) kep.tr uzantili alan adi girmesine izin verilme durumunu gosterir.</returns>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Message.addKepFrom(System.String,System.String)">
            <summary>
            KEP iletisi gonderen(From) KEP adres alani ekle. Deger null olmamali.
            </summary>
            <param name="displayName">Kep hesap sahibi adresinin gorunen adi. Bos gecilebilir.</param>
            <param name="address">KEP adresi. xxx@hs0x.kep.tr formatinda.</param>
            <exception cref="T:System.ArgumentNullException">Alan null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Message.removeKepFrom">
            <summary>
            KEP iletisi gonderen(From) KEP adres alanini temizle.
            </summary>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Message.getKepFrom">
            <summary>
            Olusturulan KEP iletisine eklenmis gonderici(From) degerini getir. 
            </summary>
            <returns>(string) KEP gonderici(From) degeri doner.</returns>
            <exception cref="T:System.NullReferenceException">Alan null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Message.addKepTo(System.String,System.String)">
            <summary>
            KEP Alici alani. Deger null olmamali.
            </summary>
            <remarks> KEP adres degeri xxx@hs0x.kep.tr formatinda olmalidir.</remarks>
            <param name="displayName">Kep hesap sahibi alici adresinin gorunen adi. Bos gecilebilir.</param>
            <param name="address">KEP adresi. xxx@hs0x.kep.tr formatinda.</param>
            <exception cref="T:System.ArgumentNullException">Alan null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Message.removeKepTo">
            <summary>
            KEP iletisi alici(To) KEP adres alanini temizle.
            </summary>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Message.getKepTo">
            <summary>
            Olusturulan KEP iletisine eklenmis alici(To) degerini getir. 
            </summary>
            <returns>(string) KEP alici(to) alani degerini getirir.</returns>
            <exception cref="T:System.NullReferenceException">Alan null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Message.addKepCc(System.String,System.String)">
            <summary>
            KEP İlgili alıcı(Cc) alani. Deger null olmamali.
            </summary>
            <remarks> KEP adres degeri xxx@hs0x.kep.tr formatinda olmalidir.</remarks>
            <param name="displayName">Kep hesap sahibi ilgili alici adresinin gorunen adi. Bos gecilebilir.</param>
            <param name="address">KEP adresi. xxx@hs0x.kep.tr formatinda.</param> 
            <exception cref="T:System.ArgumentNullException">Alan null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Message.removeKepCc">
            <summary>
            KEP iletisi ilgili alici(Cc) KEP adres alanini temizle.
            </summary>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Message.getKepCc">
            <summary>
            Olusturulan KEP iletisine eklenmis İlgili alici(Cc) degerini getir. 
            </summary>
            <returns>(string) KEP ilgili alici(CC) alani degerini getirir.</returns>
            <exception cref="T:System.NullReferenceException">Alan null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Message.addKepSubject(System.String)">
            <summary>
            KEP İletisi konu alanı. Deger null olmamali.
            </summary>
            <param name="subject">KEP iletisi konu(subject) alanı. Boş olmamalı</param>
            <exception cref="T:System.ArgumentNullException">Alan null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Message.getKepSubject">
            <summary>
            Olusturulan KEP iletisi konu(Subject) degeri gelir. 
            </summary>
            <returns>(string) KEP konu(Subject) alani degerini getirir.</returns>
            <exception cref="T:System.NullReferenceException">Alan null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Message.addKepIletiTip(System.String)">
            <summary>
            KEP İletisi mesaj tip alanı. Deger null olmamali.
            </summary>
            <param name="tip">Mesaj tipi varsayilan deger standart</param>
            <exception cref="T:System.ArgumentNullException">Alan null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Message.getKepIletiTip">
            <summary>
            KEP İletisi mesaj tip alanı degeri.
            </summary>
             <returns>(string) KEP mesaj tipi alani degerini getirir.</returns>
            <exception cref="T:System.NullReferenceException">Alan null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Message.addKepIletiID(System.String)">
            <summary>
            KEP İletisi kullanici tarafindan belirlenen mesaj ID alanı. Deger null olmamali.
            </summary>
            <param name="ID">Alfanumerik Mesaj ID degeri</param>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Message.getKepIletiID">
            <summary>
            KEP İletisi kullanici tarafindan belirlenen mesaj ID alanı degeri.
            </summary>
             <returns>(string) KEP mesaj ID alani degerini getirir.</returns>
            <exception cref="T:System.NullReferenceException">Alan null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Message.addKepIletiDetay(System.String)">
            <summary>
            KEP İletisi kullanici tarafindan belirlenen ek ileti ID alanı. Bu alan eTebligat donuslerinde veya özel amaçlarla kullanılır. Deger null olmamali.
            </summary>
            <param name="ID">Alfanumerik Mesaj ID degeri</param>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Message.getKepIletiDetay">
            <summary>
            KEP İletisi kullanici tarafindan belirlenen ek ileti  ID alanı degeri. Bu alan genellikle eTebligat donuslerinde veya özel amaçlarla kullanılır.
            </summary>
             <returns>(string) KEP ileti detay alani degerini getirir.</returns>
            <exception cref="T:System.NullReferenceException">Alan null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Message.addKepBodyHTML_UTF8(System.String)">
            <summary>
            KEP İletisi govde (body) alanina HTML icerik ekler.  Icerikler UTF8 dil encoding ile gelmelidir.
            
            Govde bolumu tercihli olarak Text ve/veya HTML alanlarindan olusur. Ancak alicinin kullanmis oldugu
            posta istencisi(Outlook, thunderbird veya webmail) oncelikle html icerigi gosterir. Eger html icerigi desteklemiyorsa, 
            text alani gosterir. Bu bolumler KEP iletisi olusturulurken alternatif olarak eklenir.
            
            HTML Body eklendiginde ayni icerigin text halini multipart alana metin olarak ekler.
            
            Modern posta istemcilerinin tamami HTML formatini desteklemektedir.
            </summary>
            <param name="htmlBody">Html formatinda icerik</param>
            <exception cref="T:System.Exception">Genel olusturma hatasi.</exception>
            <exception cref="T:System.ArgumentNullException">Girilen deger null.</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Message.addKepBodyText_UTF8(System.String)">
            <summary>
            KEP İletisi govde (body) alanina metin icerik ekler. Icerikler UTF8 dil encoding ile gelmelidir.
            
            Govde bolumu tercihli olarak Text veya HTML alanlarindan olusur. Ancak alicinin kullanmis oldugu
            posta istencisi(Outlook, thunderbird veya webmail) oncelikle html icerigi gosterir. Eger html icerigi desteklemiyorsa, 
            text alani gosterir. Bu bolumler KEP iletisi olusturulurken alternatif olarak eklenir.
            
            Modern posta istemcilerinin tamami HTML formatini desteklemektedir.
            </summary>
            <param name="textBody">Text formatinda icerik</param>
            <exception cref="T:System.Exception">Genel olusturma hatasi.</exception>
            <exception cref="T:System.ArgumentNullException">Girilen deger null.</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Message.decodeText(System.String)">
            <summary>
            KEP İletisine eklenti metinlerini decode eder. RFC 2047 ve/veya RFC 2231  
            </summary>
            <param name="encodedMetin">Decode Edilecek Metin</param>
             <returns>(string) Decode edilmis metin.</returns>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Message.addKepBodyAttachment(System.String)">
            <summary>
            KEP İletisine eklenti ekler. Eklenti dizini ve dosya adi ile birlikte giriniz. 
            
            KEP iletisine bu alan 'application/octet-stream' olarak eklenecektir.
            </summary>
            <param name="fileName">Eklentinin sistemde bulundugu dizinle birlikte adi.</param>
            <exception cref="T:System.Exception">Genel olusturma hatasi.</exception>
            <exception cref="T:System.ArgumentNullException">Girilen deger null.</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Message.addKepBodyAttachmentWithByteArray(System.IO.Stream,System.String)">
            <summary>
            
            </summary>
            <param name="fileArr"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Message.getKEPBodyToString">
            <summary>
            KEP İletisinin govde(Body) alanini string olarak getirir. 
            
            Not:Body alani farkli bir amacla kullanilacaksa byte array olarak kullaniniz. 
            Bu method ile cagrildiginda satir sonu degerleri 'LF' ile gelebilir. Satir sonu
            degeri 'CRLF' olmalidir.
            </summary>
             <returns>(string) KEP govde(Body) alani degerini getirir.<br/>Not:Body alani farkli bir amacla kullanilacaksa byte array olarak kullaniniz. 
            Bu method ile cagrildiginda satir sonu degerleri 'LF' ile gelebilir. Satir sonu
            degeri 'CRLF' olmalidir. </returns>
            <exception cref="T:System.ArgumentNullException">Kep ileti govdesi degeri null.</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Message.getKEPBodyToByteArray">
            <summary>
            KEP İletisinin govde(Body) alanini byte array olarak getirir. 
            </summary>
            <returns>(byte[]) KEP govde(Body) alnini byte array olarak getirir.</returns>
            <exception cref="T:System.ArgumentNullException">Kep ileti govdesi degeri null.</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Message.getKEPIletiToString">
            <summary>
            KEP İletisini string olarak getirir. 
            
            Not:Kep iletisi farkli bir amacla kullanilacaksa byte array olarak kullaniniz. 
            Bu method ile cagrildiginda satir sonu degerleri 'LF' ile gelebilir. Satir sonu
            degeri 'CRLF' olmalidir. 
            </summary>
            <returns>(string) KEP iletisini alnini degerini getirir.\r\n<br/>Onemli Not: Kep iletisi gönderme amaclı kullanilacaksa byte array olarak kullaniniz.\r\n<br/>
            Bu method ile cagrildiginda satir sonu degerleri 'LF' ile gelebilir. \r\n<br/>KEP sistemi 'LF' ile gelen alanı 'CRLF' ye cevirecegi icin imza dogrulama hatası alinacaktir. Satir sonu degeri 'CRLF' olmalidir. </returns>
            <exception cref="T:System.ArgumentNullException">KEP iletisi degeri null.</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Message.getKEPIletiToByteArray">
            <summary>
            KEP İletisini byte array olarak getirir. 
            </summary>
            <returns>(byte[]) KEP govde(Body) alnini byte array olarak getirir.</returns>
            <exception cref="T:System.ArgumentNullException">KEP iletisi degeri null.</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Message.saveKEPIleti(System.String)">
            <summary>
            KEP İletisini dosyaya kayit eder. 
            </summary>
            <param name="fileName">KEP iletisinin kayit edilecegi dizin ve dosya adi</param>
            <exception cref="T:System.ArgumentNullException">Girilen deger null.</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Message.kepImzala">
            <summary>
            KEP İletisini imzalama islemi
            </summary>
            <exception cref="T:System.ArgumentNullException">Girilen deger null.</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Message.createKepBody">
            <summary>
            KEP İletisi govde (body) alanini olusturur. Bu alan icerisinde sirasiyla 'multipart/Signed', 
            'multipart/Mixed' ve 'multipart/alternative' bolumler bulunur. Bu alan olusturulduktan sonra
             icerik HMTL ve/veya Text alan eklenmelidir.
            </summary>
            <exception cref="T:System.Exception">Genel olusturma hatasi.</exception>
        </member>
        <member name="T:com.verion.uniApi.KEP_Mail_Parse">
            <summary>
             Bu sinif Kayıtlı Elektronik Posta Sistemine İlişkin Usul ve Esaslar Hakkında Yönetmelige ve ETSI TS 102 640 uyumlu, 
             KEP iletisi ayrıştırmak amacıyla hazırlanmıştır.<br/><br/>
            
             Kep ileti ayrıştırılırken kullanılan temel ve gerekli alanlar methodlar eklenmistir.
             
              <br/><br/>
            
            </summary>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Parse.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Parse.getKepFrom">
            <summary>
            KEP iletisi gonderici(From) degerini getir. 
            </summary>
            <returns>(string) KEP gonderici(From) degeri doner.</returns>
            <exception cref="T:System.NullReferenceException">Alan null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Parse.getKepTo">
            <summary>
            KEP iletisi alici(To) degerini getir. 
            </summary>
            <returns>(string) KEP alici(to) alani degerini getirir.</returns>
            <exception cref="T:System.NullReferenceException">Alan null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Parse.getKepCc">
            <summary>
            KEP iletisi İlgili alici(Cc) degerini getir. 
            </summary>
            <returns>(string) KEP ilgili alici(CC) alani degerini getirir.</returns>
            <exception cref="T:System.NullReferenceException">Alan null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Parse.getKepReturnPath">
            <summary>
             KEP İletisi Header Return path degeri. Servis Adresi
            </summary>
             <returns>(string) KEP return path alani degerini getirir.</returns>
            <exception cref="T:System.NullReferenceException">Alan null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Parse.getKepDeliveredTo">
            <summary>
             KEP İletisi Header Delivered To degeri.
            </summary>
             <returns>(string) KEP Delivered To alani degerini getirir.</returns>
            <exception cref="T:System.NullReferenceException">Alan null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Parse.getKepEnvelopeTo">
            <summary>
             KEP İletisi Header Envelope To degeri.
            </summary>
             <returns>(string) KEP Envelope To alani degerini getirir.</returns>
            <exception cref="T:System.NullReferenceException">Alan null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Parse.getKepReplyTo">
            <summary>
             KEP İletisi Header Reply To degeri.
            </summary>
             <returns>(string) KEP ReplyTo alani degerini getirir.</returns>
            <exception cref="T:System.NullReferenceException">Alan null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Parse.getKepXRemMsgType">
            <summary>
             KEP İletisi mesajı tipi degeri.Message: delil, Dipatch: Kep iletisi 
            </summary>
            <remarks>KEP iletisine ait mesaj tip sonucu [Message, Dispatch] degerleri doner.<br/><br/>Message: KEP Delil iletisi, <br/><br/>Dipatch: KEP iletisi </remarks>
             <returns>(string) KEP X-REM-Msg-Type alani degerini getirir.</returns>
            <exception cref="T:System.NullReferenceException">Alan null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Parse.getKepXRemHashAlgorithm">
            <summary>
             KEP iletisi hash algorithm degeri.
            </summary>
             <returns>(string) KEP X-REM-hashAlgorithm alani degerini getirir.</returns>
            <exception cref="T:System.NullReferenceException">Alan null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Parse.getKepXRemHashValue">
            <summary>
             KEP iletisi hash degeri.
            </summary>
             <returns>(string) KEP X-REM-hashValue alani degerini getirir.</returns>
            <exception cref="T:System.NullReferenceException">Alan null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Parse.getKepXRemUAMessageIdentifier">
            <summary>
             KEP iletisi kullanici mesaj id degeri.
            </summary>
            <remarks>KEP iletisi kullanıcı iletisi ID numarası. KEP iletisi ve ilgili delilleri için bu ID numarası aynıdır.</remarks>
             <returns>(string) KEP X-REM-UAMessageIdentifier alani degerini getirir.</returns>
            <exception cref="T:System.NullReferenceException">Alan null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Parse.getKepXRemMessageIDbyREMMD">
            <summary>
             KEP iletisi KEPHS mesaj id degeri.
            </summary>
            <remarks>KEP iletisine özel eşsiz sistem tarafından üzerilen ID numarası</remarks>
             <returns>(string) KEP X-REM-MessageIdentifierByREMMD alani degerini getirir.</returns>
            <exception cref="T:System.NullReferenceException">Alan null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Parse.getKepXREMEvidenceIdentifier">
            <summary>
             KEP iletisi delil mesaj id degeri.
            </summary>
             <returns>(string) KEP X-REM-EvidenceIdentifier alani degerini getirir.</returns>
            <exception cref="T:System.NullReferenceException">Alan null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Parse.getKepXRemEvidenceType">
            <summary>
             KEP iletisi delil tipi degeri.
            </summary>
            <remarks>KEP Delil türü .Bu alan sadece deliller için oluşturulur.<br/><br/>
            SubmissionAcceptanceRejection – Acceptance : KEP Sistemine  ulaşan mesajların gerekli kontrollerden başarılı şekilde geçmesi durumunda, mesajın sistem tarafından kabul edildiğine dair üretilir.<br/>
            SubmissionAcceptanceRejection – Rejection : KEP Sistemine  ulaşan mesajların gerekli kontrolleri yapılması esnasında ortaya çıkan (mesajın virüs içermesi gibi) aykırı durumlarda mesajın sistem tarafından red edildiğine dair olarak üretilir.<br/>
            REMMDAcceptanceRejection – Acceptance : KEP Sisteminin Alıcı pozisyonunda olması durumunda farklı bir KEPHS sisteminden iletilen mesajların kabul edilmesi durumunda üretilir.<br/>
            REMMDAcceptanceRejection – Rejection : KEP Sisteminin Alıcı pozisyonunda olması durumunda farklı bir KEPHS sisteminden iletilen mesajların red edilmesi durumunda üretilir.<br/>
            RelayToREMMDFailure : KEP Sisteminin Gönderici pozisyonunda olması durumunda, Alıcı KEP sistemine gönderim yapılamadığı zaman üretilir.<br/>
            DeliveryNonDeliveryToRecipient – Delivery: Alıcının Posta kutusuna mesajın başarılı bir şekilde teslim edilmesi  durumunda üretilir.<br/>
            DeliveryNonDeliveryToRecipient – Expiration: Belli bir süre içerisinde Alıcının posta kutusuna mesajın teslim edilememesi durumunda üretilir.<br/>
            RetrievalNonRetrievalByRecipient – Retrieval : Alıcının iletiye eriştiğide üretilir ve gönderici kep adresine gönderilir.<br/>
            </remarks>
             <returns>(string) KEP X-REM-EvidenceType alani degerini getirir.</returns>
            <exception cref="T:System.NullReferenceException">Alan null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Parse.getKepXREMEventCode">
            <summary>
             KEP iletisi delil mesaj id degeri.
            </summary>
            <remarks>KEP delili referans kodu. Bu alan sadece deliller için geçerli bilgi içerir. KEP iletilerinde bu alan bulunmamaktadır.<br/>
            Delil Türlerine Göre;<br/>
            <br/>
            “SubmissionAcceptanceRejection” Delili İçin<br/>
            Kod	-- Açıklaması<br/>
            Acceptance -- Başarılı<br/>
            Rejection -- 	Başarısız, geri çevrilmiş<br/>
            <br/>
            “RelayREMMDAcceptanceRejection” Delili İçin<br/>
            Kod -- 	Açıklaması<br/>
            Acceptance -- 	Başarılı<br/>
            Rejection -- 	Başarısız, geri çevrilmiş<br/>
            <br/>
            “RelayREMMDFailure” Delili İçin<br/>
            Kod -- 	Açıklaması<br/>
            DeliveryExpiration -- 	Başarısız, zaman aşımı<br/>
            Rejection -- 	Başarısız, geri çevrilmiş<br/>
            <br/>
            “DeliveryNonDeliveryToRecipient” Delili İçin<br/>
            Kod -- 	Açıklaması<br/>
            Delivery -- 	Başarılı<br/>
            DeliveryExpiration -- 	Başarısız, zaman aşımı<br/>
            <br/>
            “RetrievalNonRetrievalByRecipient” Delili İçin<br/>
            Kod -- 	Açıklaması<br/>
            Retrieval -- 	Başarılı<br/>
            RetrievalExpiration -- 	Başarısız, zaman aşımı</remarks>
             <returns>(string) KEP X-REM-EventCode alani degerini getirir.</returns>
            <exception cref="T:System.NullReferenceException">Alan null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Parse.getKepXREMIletiTip">
            <summary>
            KEP İletisi mesaj tip alanı degeri.
            </summary>
             <returns>(string) KEP mesaj tipi alani degerini getirir.</returns>
            <exception cref="T:System.NullReferenceException">Alan null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Parse.getKepXREMIletiID">
            <summary>
            KEP İletisi kullanici tarafindan belirlenen mesaj ID alanı degeri.
            </summary>
             <returns>(string) KEP mesaj ID alani degerini getirir.</returns>
            <exception cref="T:System.NullReferenceException">Alan null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Parse.getKepXREMIletiDetay">
            <summary>
            KEP İletisi kullanici tarafindan belirlenen ek ileti ID alanı degeri.
            </summary>
             <returns>(string) KEP ek ileti ID alani degerini getirir.</returns>
            <exception cref="T:System.NullReferenceException">Alan null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Parse.getKepMessageID">
            <summary>
            KEP İletisi mesaj ID alanı degeri.
            </summary>
             <returns>(string) KEP mesaj ID alani degerini getirir.</returns>
            <exception cref="T:System.NullReferenceException">Alan null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Parse.getKepIletiDate">
            <summary>
            KEP İletisi tarih alanı degeri.
            </summary>
             <returns>(DateTime) KEP tarih alani degerini getirir.</returns>
            <exception cref="T:System.NullReferenceException">Alan null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Parse.getKepIletiGunSayac">
            <summary>
            KEP İletisi eTebligat gun sayac alanı degeri.
            </summary>
             <returns>(string) KEP gun sayac alani degerini getirir.</returns>
            <exception cref="T:System.NullReferenceException">Alan null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Parse.getKepSubject">
            <summary>
            KEP İletisi konu(Subject) degeri.
            </summary>
             <returns>(string) KEP konu(subject) degerini getirir.</returns>
            <exception cref="T:System.NullReferenceException">Alan null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Parse.getEMLTuru">
            <summary>
             Acilan EML'nin turu.
            </summary>
            <remarks>KEP iletisine özel eşsiz sistem tarafından üzerilen ID numarası</remarks>
             <returns>(int) EMl icerigine bakilarak orginal ileti, KEPHS iletisi veya KEPHS delili bilgisi doner.<br/>
              <br/>
              0: EML KEP iletisi degil.<br/>
              1: EML kullanici tarafindan olusturulan Orjinal ileti.<br/>
              2: EML KEPHS iletisi<br/>
              3: EML KEPHS delili
            </returns>
            <exception cref="T:System.NullReferenceException">Alan null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Parse.getEMLParseFromFile(System.String)">
            <summary>
            KEP EMLyi dosyadan okuyarak iceri aktarir.
            </summary>
            <remarks>Iceri aktarim sirasinda Encoding.UTF8 islemi yapar.</remarks>
            <param name="fileName">EML dosya tum dizini ve adi</param>
            <exception cref="T:System.NullReferenceException">Alan null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Parse.getEMLParseFromByte(System.Byte[])">
            <summary>
            KEP EMLyi byte array olarak iceri aktarir.
            </summary>
            <remarks>Iceri aktarim sirasinda Encoding.UTF8 islemi yapar.</remarks>
            <param name="veri">EML dosyasi byte array</param>
            <exception cref="T:System.NullReferenceException">Alan null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Parse.getEMLParseFromStream(System.IO.Stream)">
            <summary>
            KEP EMLyi Stream olarak iceri aktarir.
            </summary>
            <remarks>Iceri aktarim sirasinda Encoding.UTF8 islemi yapar.</remarks>
            <param name="akis">EML dosyasi Stream</param>
            <exception cref="T:System.NullReferenceException">Alan null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Parse.getOrgEMLParseFromFile(System.String)">
            <summary>
            KEP EMLyi dosyadan okur ve Orginal iletiyi KEP eml'si olarak iceri aktarir . 
            </summary>
            <remarks>Iceri aktarim sirasinda Encoding.UTF8 islemi yapar.</remarks>
            <param name="fileName">EML dosya tum dizini ve adi</param>
            <exception cref="T:System.NullReferenceException">Dosya Adi null deger aldiginda gelir</exception>
            <exception cref="T:System.NullReferenceException">Orginal message okunamadiginda gelir</exception>
            <exception cref="T:System.NullReferenceException">Kep iletisi icerisinde Orginal message bulunamadiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Parse.getOrgEMLParseFromByte(System.Byte[])">
            <summary>
            KEP EMLyi  byte array olarak okur ve Orginal iletiyi KEP eml'si olarak iceri aktarir . 
            </summary>
            <remarks>Iceri aktarim sirasinda Encoding.UTF8 islemi yapar.</remarks>
            <param name="veri">EML dosyasi byte array</param>
            <exception cref="T:System.NullReferenceException">Dosya Adi null deger aldiginda gelir</exception>
            <exception cref="T:System.NullReferenceException">Orginal message okunamadiginda gelir</exception>
            <exception cref="T:System.NullReferenceException">Kep iletisi icerisinde Orginal message bulunamadiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Parse.getKepBodyText">
            <summary>
            KEP İletisi konu(Subject) degeri.
            </summary>
            <remarks>KEP iletisi govde alaninda hem HTML hemde Text alan olabilir. Bu iki alan birbirinden farkli icerikler icerebilirler.Gonderilen iletiler icin Text ve HTML alanlar birlikte kullanilmalidir.<br/>
            Bu iki metin  multipart/alternative bolunde yer alirlar. Modern mail client uygulamalari(Outlook, Thunderbird vb.) HTML icerik goruntulerler. Text alan ise genellikle HTML icerigin goruntulenmedigi durumlarda alternatif metin olarak gosterilir.  
            </remarks>
            <returns>(string) KEP konu(subject) degerini getirir.</returns>
            <exception cref="T:System.NullReferenceException">Alan null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Parse.getKepBodyHTML">
            <summary>
            KEP İletisi konu(Subject) degeri.
            </summary>
            <remarks>KEP iletisi govde alaninda hem HTML hemde Text alan olabilir. Bu iki alan birbirinden farkli icerikler icerebilirler.Gonderilen iletiler icin Text ve HTML alanlar birlikte kullanilmalidir.<br/>
            Bu iki metin  multipart/alternative bolunde yer alirlar. Modern mail client uygulamalari(Outlook, Thunderbird vb.) HTML icerik goruntulerler. Text alan ise genellikle HTML icerigin goruntulenmedigi durumlarda alternatif metin olarak gosterilir.  
            </remarks>
             <returns>(string) KEP konu(subject) degerini getirir.</returns>
            <exception cref="T:System.NullReferenceException">Alan null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Parse.getAllAttachmentList">
            <summary>
            KEP İletisi eklenti listesi verir.&lt; int eklentiid, string dosya adi &gt;
            </summary>
            <remarks> KEP iletisi icerisindeki imza bolumu dahil butun eklentileri listeler.
            </remarks>
             <returns>(List &lt; KeyValuePair &lt; int eklentiid, string dosya adi &gt; &gt;) Eklenti sira numarasi ve dosya adi</returns>
            <exception cref="T:System.NullReferenceException">KEP EML Body null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Parse.getSMimePartToString">
            <summary>
            KEP İletisi SMime imza bolumunu string olarak doner.
            </summary>
            <remarks> KEP iletisi SMime imza bolumunu string olarak doner. Alternatif olarak getSMimepartToByte() methodu kullanilabilir.
            </remarks>
             <returns>(string) SMime imza eklentisini doner</returns>
            <exception cref="T:System.NullReferenceException">KEP EML Body null deger aldiginda gelir</exception>
            <exception cref="T:System.NullReferenceException">KEP EML SMime null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Parse.getSMimepartToByte">
            <summary>
            KEP İletisi SMime imza bolumunu byte[] olarak doner.
            </summary>
            <remarks> KEP iletisi SMime imza bolumunu byte array olarak doner. 2GB dosya buyuklugune kadar bu method kullanilir.
            </remarks>
             <returns>(byte[]) SMime imza eklentisini doner</returns>
            <exception cref="T:System.NullReferenceException">KEP EML Body null deger aldiginda gelir</exception>
            <exception cref="T:System.NullReferenceException">KEP EML SMime null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Parse.getAttachmentToByte(System.Int64,System.Boolean)">
            <summary>
            KEP İletisi icerisindeki eklentiyi byte array olarak doner.
            </summary>
            <remarks> KEP iletisi icerisindeki eklentiyi byte array olarak doner. 2GB dosya buyuklugune kadar bu method kullanilir.
            </remarks>
            <param name="attachmentID">Eklenti sira numarasi</param> 
            <param name="base64Decode">Eklentiyi Base64 decode et(true). Eklenti mail icerinde 64 formatinda gelir.</param> 
            <returns>(byte[]) Eklenti dosyasi doner</returns>
            <exception cref="T:System.ArgumentNullException">KEP EML Body null deger aldiginda gelir</exception>
            <exception cref="T:System.ArgumentNullException">attachmentID null deger aldiginda gelir</exception>
            <exception cref="T:System.ArgumentNullException">KEP EML eklenti null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Parse.getPlainTextAttachmentToByte(System.Int64)">
            <summary>
            KEP İletisi icerisindeki plain text eklentiyi byte array olarak doner.
            </summary>
            <remarks> KEP iletisi icerisindeki plain text eklentiyi byte array olarak doner. 2GB dosya buyuklugune kadar bu method kullanilir.
            </remarks>
            <param name="attachmentID">Eklenti sira numarasi</param> 
            <returns>(byte[]) Eklenti dosyasi doner</returns>
            <exception cref="T:System.ArgumentNullException">KEP EML Body null deger aldiginda gelir</exception>
            <exception cref="T:System.ArgumentNullException">attachmentID null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Parse.getAttachmentToStream(System.Int64)">
            <summary>
            KEP İletisi icerisindeki eklentiyi byte array olarak doner.
            </summary>
            <remarks> KEP iletisi icerisindeki eklentiyi byte array olarak doner. 2GB dosya buyuklugune kadar bu method kullanilir.
            </remarks>
            <param name="attachmentID">Eklenti sira numarasi</param> 
            <returns>(byte[]) Eklenti dosyasi doner</returns>
            <exception cref="T:System.NullReferenceException">KEP EML Body null deger aldiginda gelir</exception>
            <exception cref="T:System.NullReferenceException">attachmentID null deger aldiginda gelir</exception>
            <exception cref="T:System.NullReferenceException">KEP EML eklenti null deger aldiginda gelir</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Parse.getKEPIletiToString">
            <summary>
            KEP İletisini string olarak getirir. 
            
            Not:Kep iletisi farkli bir amacla kullanilacaksa byte array olarak kullaniniz. 
            Bu method ile cagrildiginda satir sonu degerleri 'LF' ile gelebilir. Satir sonu
            degeri 'CRLF' olmalidir. 
            </summary>
            <returns>(string) KEP iletisini alnini degerini getirir.\r\n<br/>Onemli Not: Kep iletisi gönderme amaclı kullanilacaksa byte array olarak kullaniniz.\r\n<br/>
            Bu method ile cagrildiginda satir sonu degerleri 'LF' ile gelebilir. \r\n<br/>KEP sistemi 'LF' ile gelen alanı 'CRLF' ye cevirecegi icin imza dogrulama hatası alinacaktir. Satir sonu degeri 'CRLF' olmalidir. </returns>
            <exception cref="T:System.ArgumentNullException">KEP iletisi degeri null.</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Parse.getKEPIletiToByteArray">
            <summary>
            KEP İletisini byte array olarak getirir. 
            </summary>
            <returns>(byte[]) KEP govde(Body) alnini byte array olarak getirir.</returns>
            <exception cref="T:System.ArgumentNullException">KEP iletisi degeri null.</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Parse.convertEMLToByteArrayMsg">
            <summary>
            KEP İletisini Outlook Msg Formatina cevirir. (Under development) 
            </summary>
            <returns>(byte[]) Cevrilen dosya stream olarak doner</returns>
            <exception cref="T:System.ArgumentNullException">KEP iletisi degeri null.</exception>
            <exception cref="T:System.ArgumentNullException">Unable to load KEP iletisi.</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Parse.convertEMLToStreamMsg">
            <summary>
            KEP İletisini Outlook Msg Formatina cevirir. (Under development) 
            </summary>
            <returns>(MemoryStream) Cevrilen dosya stream olarak doner</returns>
            <exception cref="T:System.ArgumentNullException">KEP iletisi degeri null.</exception>
            <exception cref="T:System.ArgumentNullException">Unable to load KEP iletisi.</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Parse.convertEMLToMsgSaveFile(System.String)">
            <summary>
            KEP İletisini Outlook Msg Formatina cevirir ve kayit eder. (Under development) 
            </summary>
            <param name="DosyaAdi">Kayit Edilecek dosya adi</param> 
            <exception cref="T:System.ArgumentNullException">KEP iletisi degeri null.</exception>
            <exception cref="T:System.ArgumentNullException">Unable to load KEP iletisi.</exception>
        </member>
        <member name="T:com.verion.uniApi.KEP_Mail_Utils">
            <summary>
             Genel amacli utility methodlari
              Base64 decode
              KEp adres format validate
            </summary>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Utils.decodeText(System.String)">
            <summary>
            KEP İletisine eklenti metinlerini decode eder. RFC 2047 ve/veya RFC 2231  
            </summary>
            <param name="encodedMetin">Decode Edilecek Metin</param>
             <returns>(string) Decode edilmis metin.</returns>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Utils.htmlToText(System.String)">
            <summary>
             Temel HTML metini text e cevirir
            </summary>
            <param name="metin">HTML metin girdisi</param>
            <returns>HTML Plain text olarak alinir</returns>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Utils.GetBytes(System.String)">
            <summary>
             String to Byte array convertion
            </summary>
            <param name="str">Metin alani</param>
            <returns>byte array convertion</returns>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Utils.base64DecodeFromByteArray(System.Byte[])">
            <summary>
             Stream to Byte array convertion
            </summary>
            <param name="Dosya">(byte[])File stream</param>
            <exception cref="T:System.Exception">Exception Return null.</exception>
            <returns>(byte[]) base64 decode edilmiş metin btye[] doner.</returns>
        </member>
        <member name="M:com.verion.uniApi.KEP_Mail_Utils.GetStreamToByteArray(System.IO.Stream)">
            <summary>
             Stream to Byte array convertion
            </summary>
            <param name="stream">Input stream</param>
            <returns>Byte[] sonuc doner  </returns>
        </member>
        <member name="T:com.verion.uniApi.KEP_Sign">
            <summary>
             Bu sinif Kayıtlı Elektronik Posta Sistemine İlişkin Usul ve Esaslar Hakkında Yönetmelige uyumlu, 
             KEP iletisi imzalamak uzerine hazirlanmistir.<br/><br/>
            
             Kep ileti olusturulurken temel ve gerekli alanlar methodlar eklenmistir.
             <br/><br/>
              
            
            </summary>
        </member>
        <member name="M:com.verion.uniApi.KEP_Sign.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:com.verion.uniApi.KEP_Sign.setPolicyPath(System.String)">
            <summary>
             ESYA policy dosyasi tum dizin ve dosya adi. Dosya adi: certval-policy.xml
            </summary>
            <param name="filePath">Dosya adi ile birlikte tum dizin</param>
            <exception cref="T:System.ArgumentNullException">File path is null</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Sign.setEsyaLicensePath(System.String)">
            <summary>
             ESYA license dosyasi tum dizin ve dosya adi.Dosya adi: BES_lisans.xml
             Not: Once policy dosyasini set edin.
            </summary>
            <param name="filePath">Dosya adi ile birlikte tum dizin</param>
            <exception cref="T:System.ArgumentNullException">File path is null</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Sign.setEsyaSmartCardConfPath(System.String)">
            <summary>
             ESYA smart card dosyasi tum dizin ve dosya adi.Dosya adi: smartcard-config.xml
             Not: Once policy ve lisans dosyasini set edin.
            </summary>
            <param name="filePath">Dosya adi ile birlikte tum dizin</param>
            <exception cref="T:System.ArgumentNullException">File path is null</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Sign.setTokenPIN(System.String)">
            <summary>
             Set Token PIN
            </summary>
            <param name="PIN">Token PIN degeri</param>
            <exception cref="T:System.ArgumentNullException">Token PIN is null</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Sign.setTerminal(System.String)">
            <summary>
             Set Terminal Name
            </summary>
            <param name="terminal">Terminal Adi</param>
            <seealso cref="M:com.verion.uniApi.KEP_Sign.getListOfTerminalsAndSlots"/>
            <exception cref="T:System.ArgumentNullException">Terminal name is null</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Sign.setSlotID(System.Int64)">
            <summary>
             Set Slot ID
            </summary>
            <param name="slotID">Slot ID</param>
            <seealso cref="M:com.verion.uniApi.KEP_Sign.getListOfTerminalsAndSlots"/>
            <seealso cref="M:com.verion.uniApi.KEP_Sign.getListOfSlotsAndCertInfo"/>
            <exception cref="T:System.ArgumentNullException">Slot ID  is null</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Sign.checkCertBeforeSigning(System.Boolean)">
            <summary>
             Check certifate is valid before signing. Default false.
            </summary>
            <param name="checkCert">Check Certificate(Boolean)</param>
        </member>
        <member name="M:com.verion.uniApi.KEP_Sign.checkCertQuatity(System.Boolean)">
            <summary>
             Constant Check Certificate Quality.Default true.
            </summary>
            <param name="quality">Check Certificate(Boolean)</param>
        </member>
        <member name="M:com.verion.uniApi.KEP_Sign.getListOfTerminalsAndSlots">
            <summary>
             Bilgisayara/Cihaza bagli USB Token terminal ve bu terminalin slot numarasini verir. 
             Terminal USB token cihazinin turunun adidir.     
            </summary>
            <returns>Pair &lt; string Terminal Adi, long slot numarasi &gt;<br/>
            </returns>
            <exception cref="T:System.ArgumentException">General Execution Exception</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Sign.getListOfSlotsAndCertInfo">
             <summary>
             Bilgisayara/Cihaza bagli USB Token slot numarasi ve sertifika sahibi bilgisini verir.
              Birden fazla token var ise islem uzun surebilir.
            </summary> 
            <returns>KeyValuePair &lt; long slot numarasi, string sertifika sahibi adi &gt;</returns>
             <exception cref="T:System.ArgumentException">General Execution Exception</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Sign.getListOfTerminalsAndCertInfo">
             <summary>
             Bilgisayara/Cihaza bagli USB Token terminal adi ve sertifika sahibi bilgisini verir.
             Birden fazla token var ise islem uzun surebilir.
            
            </summary> 
             <returns> KeyValuePair &lt; string terminal adi, string sertifika sahibi adi &gt;</returns>
             <exception cref="T:System.ArgumentException">General Execution Exception</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Sign.getCertOwnerInfo(System.String)">
            <summary>
              Bilgisayara/Cihaza bagli USB Token Sertifa sahibi bilgilerinini verir.
              Terminal adi getListOfTerminalsAndSlots() methodundan alinmalidir.
            </summary>
            <param name="terminalAdi">USB Token terminal adi.</param>
            <returns>KeyValuePair &lt; string baslik, string sertifika bilgisi &gt;
            <br/>Basliklar:<br/>
                NAME: string sertifika sahibi adi, <br/>
                TCKIMLIK: string sertifika sahibi adi, <br/>
                VALID_TO: string sertfika gecerlilik bitis tarihi<br/>
                VALID_FROM: string sertifika becerlilik baslangic tarihi 
             </returns>
             <exception cref="T:System.ArgumentException">General Execution Exception</exception>
        </member>
        <member name="M:com.verion.uniApi.KEP_Sign.SMIME_Imzala_Body_byToken(System.Byte[])">
            <summary>
             KEP Imzalama verisi olusturur.
            </summary>
            <param name="imzala_body">Imzalanacak veri</param>
            <returns>(byte[]) Icerigin Imzalanmis SMIME verisi doner.Imzalama methodu: detached signature</returns>
            <exception cref="T:System.ArgumentNullException">Sertifika PIN numarasi girilmemis</exception>
            <exception cref="T:System.ArgumentNullException">KEP EML Body alani bos</exception>
             <exception cref="T:System.ArgumentNullException">Terminal set edilmemis</exception>
             <exception cref="T:System.ArgumentNullException">Slot ID tanimlanmamis</exception>
        </member>
        <member name="T:com.verion.uniApi.SmartCardManager.KEP_Sign_Constants">
            <summary>
             Bu sinif Kayıtlı Elektronik Posta Sistemine İlişkin Usul ve Esaslar Hakkında Yönetmelige uyumlu, 
             KEP iletisi imzalamak uzerine hazirlanmistir.
            
             Imzalama Araclari sabitleri islenir.
             
              
            
            </summary>
        </member>
        <member name="F:com.verion.uniApi.SmartCardManager.KEP_Sign_Constants.LICENSE_FILE">
            <summary>
            ESYA License File location
            </summary>
        </member>
        <member name="M:com.verion.uniApi.SmartCardManager.KEP_Sign_Constants.getDirectory">
            <summary>
            Get Working Directory
            </summary>
        </member>
        <member name="M:com.verion.uniApi.SmartCardManager.KEP_Sign_Constants.setPolicyFile(System.String)">
            <summary>
            Set Policy File path
            </summary>
        </member>
        <member name="M:com.verion.uniApi.SmartCardManager.KEP_Sign_Constants.setLicenseFile(System.String)">
            <summary>
            Set Licence File path
            </summary>
        </member>
        <member name="M:com.verion.uniApi.SmartCardManager.KEP_Sign_Constants.setLicence">
            <summary>
            Set ESYA Licence File 
            </summary>
        </member>
        <member name="M:com.verion.uniApi.SmartCardManager.KEP_Sign_Constants.setSmartCardDrivers(System.String)">
            <summary>
            Set ESYA Smart Card Conf file 
            </summary>
        </member>
        <member name="M:com.verion.uniApi.SmartCardManager.KEP_Sign_Constants.getPolicy">
            <summary>
            Get Esya Policy  
            </summary>
        </member>
        <member name="M:com.verion.uniApi.SmartCardManager.KEP_Sign_Constants.getTSSettings">
            <summary>
            Test TimeStamp 
            </summary>
        </member>
        <member name="M:com.verion.uniApi.SmartCardManager.KEP_Sign_Constants.getCheckQCStatement">
            <summary>
            Constant Check Certificate Quality
            </summary>
        </member>
        <member name="M:com.verion.uniApi.SmartCardManager.KEP_Sign_Constants.validateCertificate">
            <summary>
             Constant Validation Certificate defalt false 
            </summary>
        </member>
        <member name="T:com.verion.uniApi.SmartCardManager.KEP_SmartCardManager">
            <summary>
             Bu sinif Kayıtlı Elektronik Posta Sistemine İlişkin Usul ve Esaslar Hakkında Yönetmelige uyumlu, 
             KEP iletisi imzalamak uzerine hazirlanmistir.<br/><br/>
            <br/><br/>
             ESYA SmartCardManager extention
             <br/><br/>
              
            
            </summary>
        </member>
        <member name="M:com.verion.uniApi.SmartCardManager.KEP_SmartCardManager.getInstance(System.String)">
             Singleton is used for this class. If many card placed, it wants to user to select one of cards.
             If there is a influential change in the smart card environment, it  repeat the selection process.
             The influential change can be: 
             		If there is a new smart card connected to system.
             		The cached card is removed from system.
             These situations are checked in getInstance() function. So for your non-squential SmartCard Operation,
             call getInstance() function to check any change in the system.
            
             In order to reset thse selections, call reset function.
             
             @return SmartCardManager instance
             @throws SmartCardException
        </member>
        <member name="M:com.verion.uniApi.SmartCardManager.KEP_SmartCardManager.#ctor(System.String)">
            
             @throws SmartCardException
        </member>
        <member name="M:com.verion.uniApi.SmartCardManager.KEP_SmartCardManager.getSigner(System.String,tr.gov.tubitak.uekae.esya.api.asn.x509.ECertificate)">
            BaseSigner interface for the requested certificate. Do not forget to logout after your crypto 
            operation finished
            @param aCardPIN
            @param aCert
            @return
            @throws SmartCardException
        </member>
        <member name="M:com.verion.uniApi.SmartCardManager.KEP_SmartCardManager.logout">
            Logouts from smart card. 
            @throws SmartCardException
        </member>
        <member name="M:com.verion.uniApi.SmartCardManager.KEP_SmartCardManager.getSignatureCertificate(System.Boolean,System.Boolean)">
            Returns for the signature certificate. If there are more than one certificates in the card in requested
            attributes, it wants user to select the certificate. It caches the selected certificate, to reset cache,
            call reset function.
            
            @param checkIsQualified Only selects the qualified certificates if it is true.
            @param checkBeingNonQualified Only selects the non-qualified certificates if it is true. 
            if the two parameters are false, it selects all certificates.
            if the two parameters are true, it throws ESYAException. A certificate can not be qualified and non qualified at
            the same time.
            
            @return certificate
            @throws SmartCardException
            @throws ESYAException
        </member>
        <member name="M:com.verion.uniApi.SmartCardManager.KEP_SmartCardManager.getEncryptionCertificate(System.Boolean,System.Boolean)">
            Returns for the encryption certificate. If there are more than one certificates in the card in requested
            attributes, it wants user to select the certificate. It caches the selected certificate, to reset cache,
            call reset function.
            
            @param checkIsQualified
            @param checkBeingNonQualified
            @return
            @throws SmartCardException
            @throws ESYAException
        </member>
        <member name="T:com.verion.KeyValueCollection`2">
            <summary>
            Represents a collection that can be accessed either with the key or with the index. 
            </summary>
        </member>
        <member name="M:com.verion.KeyValueCollection`2.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:com.verion.KeyValueCollection`2.Add(`0,`1)">
            <summary>
            Adds the specified key and value to the collection.
            </summary>
            <param name="key">Key.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:com.verion.KeyValueCollection`2.Remove(`0)">
            <summary>
            Removes the value with the specified key from the collection.
            </summary>
            <param name="key">Key.</param>
            <returns>Returns if key found and removed, otherwise false.</returns>
        </member>
        <member name="M:com.verion.KeyValueCollection`2.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:com.verion.KeyValueCollection`2.ContainsKey(`0)">
            <summary>
            Gets if the collection contains the specified key.
            </summary>
            <param name="key">Key.</param>
            <returns>Returns true if the collection contains specified key.</returns>
        </member>
        <member name="M:com.verion.KeyValueCollection`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">Key.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found.</param>
            <returns>Returns true if the collection contains specified key and value stored to <b>value</b> argument.</returns>
        </member>
        <member name="M:com.verion.KeyValueCollection`2.TryGetValueAt(System.Int32,`1@)">
            <summary>
            Gets the value at the specified index.
            </summary>
            <param name="index">Zero based item index.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found.</param>
            <returns>Returns true if the collection contains specified key and value stored to <b>value</b> argument.</returns>
        </member>
        <member name="M:com.verion.KeyValueCollection`2.ToArray">
            <summary>
            Copies all elements to new array, all elements will be in order they added. This method is thread-safe.
            </summary>
            <returns>Returns elements in a new array.</returns>
        </member>
        <member name="M:com.verion.KeyValueCollection`2.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns>Returns IEnumerator interface.</returns>
        </member>
        <member name="P:com.verion.KeyValueCollection`2.Count">
            <summary>
            Gets number of items int he collection.
            </summary>
        </member>
        <member name="P:com.verion.KeyValueCollection`2.Item(`0)">
            <summary>
            Gets item with the specified key.
            </summary>
            <param name="key">Key.</param>
            <returns>Returns item with the specified key. If the specified key is not found, a get operation throws a KeyNotFoundException.</returns>
        </member>
        <member name="T:com.verion.uniapi.Mail.Mail_h_AddressList">
            <summary>
            This class represent generic <b>address-list</b> header fields. For example: To header.
            </summary>
            <example>
            <code>
            RFC 5322.
                header       = "FiledName:" address-list CRLF
                address-list = (address *("," address))
                address      = mailbox / group
            </code>
            </example>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_h_AddressList.#ctor(System.String,com.verion.uniapi.Mail.Mail_t_AddressList)">
            <summary>
            Default constructor.
            </summary>
            <param name="fieldName">Header field name. For example: "To".</param>
            <param name="values">Addresses collection.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>filedName</b> or <b>values</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_h_AddressList.Parse(System.String)">
            <summary>
            Parses header field from the specified value.
            </summary>
            <param name="value">Header field value. Header field name must be included. For example: 'Content-Type: text/plain'.</param>
            <returns>Returns parsed header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_h_AddressList.ToString(com.verion.uniapi.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <param name="reEncode">If true always specified encoding is used. If false and header field value not modified, original encoding is kept.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_h_AddressList.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_h_AddressList.Name">
            <summary>
            Gets header field name. For example "To".
            </summary>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_h_AddressList.Addresses">
            <summary>
            Gets addresses collection.
            </summary>
        </member>
        <member name="T:com.verion.uniapi.Mail.Mail_h_DispositionNotificationOptions">
            <summary>
            Represents "Disposition-Notification-Options:" header. Defined in RFC 2298 2.2.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_h_DispositionNotificationOptions.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_h_DispositionNotificationOptions.ToString(com.verion.uniapi.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <param name="reEncode">If true always specified encoding is used. If false and header field value not modified, original encoding is kept.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_h_DispositionNotificationOptions.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_h_DispositionNotificationOptions.Name">
            <summary>
            Gets header field name. For example "Sender".
            </summary>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_h_DispositionNotificationOptions.Address">
            <summary>
            Gets or sets mailbox address.
            </summary>
        </member>
        <member name="T:com.verion.uniapi.Mail.Mail_h_Mailbox">
            <summary>
            This class represent generic <b>mailbox</b> header fields. For example: Sender: header.
            </summary>
            <example>
            <code>
            RFC 5322.
                header = "FiledName:" mailbox CRLF
            </code>
            </example>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_h_Mailbox.#ctor(System.String,com.verion.uniapi.Mail.Mail_t_Mailbox)">
            <summary>
            Default constructor.
            </summary>
            <param name="fieldName">Header field name. For example: "Sender".</param>
            <param name="mailbox">Mailbox value.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>filedName</b> or <b>mailbox</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_h_Mailbox.Parse(System.String)">
            <summary>
            Parses header field from the specified value.
            </summary>
            <param name="value">Header field value. Header field name must be included. For example: 'Sender: john.doe@domain.com'.</param>
            <returns>Returns parsed header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_h_Mailbox.ToString(com.verion.uniapi.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <param name="reEncode">If true always specified encoding is used. If false and header field value not modified, original encoding is kept.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_h_Mailbox.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_h_Mailbox.Name">
            <summary>
            Gets header field name. For example "Sender".
            </summary>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_h_Mailbox.Address">
            <summary>
            Gets mailbox address.
            </summary>
        </member>
        <member name="T:com.verion.uniapi.Mail.Mail_h_MailboxList">
            <summary>
            This class represent generic <b>mailbox-list</b> header fields. For example: From header.
            </summary>
            <example>
            <code>
            RFC 5322.
                header       = "FiledName:" mailbox-list CRLF
                mailbox-list =  (mailbox *("," mailbox)) / obs-mbox-list
            </code>
            </example>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_h_MailboxList.#ctor(System.String,com.verion.uniapi.Mail.Mail_t_MailboxList)">
            <summary>
            Default constructor.
            </summary>
            <param name="filedName">Header field name. For example: "To".</param>
            <param name="values">Addresses collection.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>filedName</b> or <b>values</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_h_MailboxList.Parse(System.String)">
            <summary>
            Parses header field from the specified value.
            </summary>
            <param name="value">Header field value. Header field name must be included. For example: 'Content-Type: text/plain'.</param>
            <returns>Returns parsed header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_h_MailboxList.ToString(com.verion.uniapi.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <param name="reEncode">If true always specified encoding is used. If false and header field value not modified, original encoding is kept.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_h_MailboxList.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_h_MailboxList.Name">
            <summary>
            Gets header field name. For example "From".
            </summary>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_h_MailboxList.Addresses">
            <summary>
            Gets addresses collection.
            </summary>
        </member>
        <member name="T:com.verion.uniapi.Mail.Mail_h_Received">
             <summary>
             Represents "Received:" header. Defined in RFC 5321 4.4.
             </summary>
             <remarks>
             <code>
             RFC 5321 4.4.
                 Time-stamp-line = "Received:" FWS Stamp CRLF
                 
                 Stamp           = From-domain By-domain Opt-info [CFWS] ";" FWS date-time
                                 ; where "date-time" is as defined in RFC 5322 [4]
                                 ; but the "obs-" forms, especially two-digit
                                 ; years, are prohibited in SMTP and MUST NOT be used.
                                 
                 From-domain     = "FROM" FWS Extended-Domain
            
                 By-domain       = CFWS "BY" FWS Extended-Domain
            
                 Extended-Domain = Domain / ( Domain FWS "(" TCP-info ")" ) / ( address-literal FWS "(" TCP-info ")" )
            
                 TCP-info        = address-literal / ( Domain FWS address-literal )
                                 ; Information derived by server from TCP connection not client EHLO.
            
                 Opt-info        = [Via] [With] [ID] [For] [Additional-Registered-Clauses]
            
                 Via             = CFWS "VIA" FWS Link
            
                 With            = CFWS "WITH" FWS Protocol
            
                 ID              = CFWS "ID" FWS ( Atom / msg-id )
                                 ; msg-id is defined in RFC 5322 [4]
            
                 For            = CFWS "FOR" FWS ( Path / Mailbox )
                 
                 Additional-Registered-Clauses  = CFWS Atom FWS String
            
                 Link           = "TCP" / Addtl-Link
            
                 Addtl-Link     = Atom
                 
                 Protocol       = "ESMTP" / "SMTP" / Attdl-Protocol
                 
                 Mailbox        = Local-part "@" ( Domain / address-literal )
             </code>
             </remarks>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_h_Received.#ctor(System.String,System.String,System.DateTime)">
            <summary>
            Default constructor.
            </summary>
            <param name="from">Host from where message was received.</param>
            <param name="by">Host name what received message.</param>
            <param name="time">Date time when message was received.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>from</b> or <b>by</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_h_Received.Parse(System.String)">
            <summary>
            Parses header field from the specified value.
            </summary>
            <param name="value">Header field value. Header field name must be included. For example: 'Sender: john.doe@domain.com'.</param>
            <returns>Returns parsed header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_h_Received.ToString(com.verion.uniapi.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <param name="reEncode">If true always specified encoding is used. If false and header field value not modified, original encoding is kept.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_h_Received.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_h_Received.Name">
            <summary>
            Returns always "Received".
            </summary>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_h_Received.From">
            <summary>
            Gets or sets host from where message was received.
            </summary>
            <remarks>Normally this is just EHLO/HELO host name what client reported to SMTP server.</remarks>
            <exception cref="T:System.ArgumentNullException">Is raised when null reference passed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid value passed.</exception>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_h_Received.From_TcpInfo">
            <summary>
            Gets or sets From TCP-Info value. Value null means not specified.
            </summary>
            <remarks>This value is message sender host IP and optional dns host name.
            This value is based on server connection info, not client reported info(EHLO/HELO).
            </remarks>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_h_Received.By">
            <summary>
            Gets or sets host name what received message.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null reference passed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid value passed.</exception>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_h_Received.By_TcpInfo">
            <summary>
            Gets or sets By TCP-Info value. Value null means not specified.
            </summary>
            <remarks>RFC defines it, but i don't see any point about that value.</remarks>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_h_Received.Via">
            <summary>
            Gets or sets non-internet transport. Value null means not specified.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_h_Received.With">
            <summary>
            Gets or sets receiving protocol. Value null means not specified.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_h_Received.ID">
            <summary>
            Gets or sets ID value. Value null means not specified.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_h_Received.For">
            <summary>
            Gets or sets mailbox for who message was received. Value null means not specified.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_h_Received.Time">
            <summary>
            Gets or sets time when message was received.
            </summary>
        </member>
        <member name="T:com.verion.uniapi.Mail.Mail_h_ReturnPath">
            <summary>
            Represents "Return-Path:" header. Defined in RFC 5322 3.6.7.
            </summary>
            <example>
            <code>
            RFC 5322 3.6.7.
                return     = "Return-Path:" path CRLF
                path       = angle-addr / ([CFWS] "&lt;" [CFWS] "&gt;" [CFWS])
                angle-addr = [CFWS] "&lt;" addr-spec "&gt;" [CFWS]
            </code>
            </example>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_h_ReturnPath.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="address">Address. Value null means null-path.</param>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_h_ReturnPath.Parse(System.String)">
            <summary>
            Parses header field from the specified value.
            </summary>
            <param name="value">Header field value. Header field name must be included. For example: 'Return-Path: &lt;jhon.doe@domain.com&gt;'.</param>
            <returns>Returns parsed header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_h_ReturnPath.ToString(com.verion.uniapi.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <param name="reEncode">If true always specified encoding is used. If false and header field value not modified, original encoding is kept.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_h_ReturnPath.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_h_ReturnPath.Name">
            <summary>
            Gets header field name. For example "Sender".
            </summary>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_h_ReturnPath.Address">
            <summary>
            Gets mailbox address. Value null means null-path.
            </summary>
        </member>
        <member name="T:com.verion.uniapi.Mail.Mail_Message">
            <summary>
            This class represent electronic mail message. Defined in RFC 5322.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_Message.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_Message.ParseFromByte(System.Byte[])">
            <summary>
            Parses mail message from the specified byte array.
            </summary>
            <param name="data">Mail message data.</param>
            <returns>Returns parsed mail message.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_Message.ParseFromByte(System.Byte[],System.Text.Encoding)">
            <summary>
            Parses mail message from the specified byte array.
            </summary>
            <param name="data">Mail message data.</param>
            <param name="headerEncoding">Header reading encoding. If not sure UTF-8 is recommended.</param>
            <returns>Returns parsed mail message.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> or <b>headerEncoding</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_Message.ParseFromFile(System.String)">
            <summary>
            Parses mail message from the specified file.
            </summary>
            <param name="file">File name with path from where to parse mail message.</param>
            <returns>Returns parsed mail message.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>file</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_Message.ParseFromFile(System.String,System.Text.Encoding)">
            <summary>
            Parses mail message from the specified file.
            </summary>
            <param name="file">File name with path from where to parse mail message.</param>
            <param name="headerEncoding">Header reading encoding. If not sure UTF-8 is recommended.</param>
            <returns>Returns parsed mail message.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>file</b> or <b>headerEncoding</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_Message.ParseFromStream(System.IO.Stream)">
            <summary>
            Parses mail message from the specified stream.
            </summary>
            <param name="stream">Stream from where to parse mail message. Parsing starts from current stream position.</param>
            <returns>Returns parsed mail message.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_Message.ParseFromStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Parses mail message from the specified stream.
            </summary>
            <param name="stream">Stream from where to parse mail message. Parsing starts from current stream position.</param>
            <param name="headerEncoding">Header reading encoding. If not sure UTF-8 is recommended.</param>
            <returns>Returns parsed mail message.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> or <b>headerEncoding</b> is null.</exception>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_Message.Clone">
            <summary>
            Clones mail message.
            </summary>
            <returns>Returns cloned message.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_Message.GetAttachments(System.Boolean)">
            <summary>
            Gets this message attachments.
            </summary>
            <param name="includeInline">Specifies if 'inline' entities are included.</param>
            <returns>Returns this message attachments.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_Message.GetAttachments(System.Boolean,System.Boolean)">
            <summary>
            Gets this message attachments.
            </summary>
            <param name="includeInline">Specifies if 'inline' entities are included.</param>
            <param name="includeEmbbedMessage">Specifies if embbed RFC822 message child entities are included.</param>
            <returns>Returns this message attachments.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_Message.Date">
            <summary>
            Gets or sets message date and time. Value <b>DateTime.MinValue</b> means not specified.
            </summary>
            <remarks>Specifies the date and time at which the creator of the message indicated that the 
            message was complete and ready to enter the mail delivery system.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_Message.From">
            <summary>
            Gets or sets message author(s). Value null means not specified.
            </summary>
            <remarks>Specifies the author(s) of the message; that is, the mailbox(es) of the person(s) or 
            system(s) responsible for the writing of the message.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_Message.To">
            <summary>
            Gets or sets message primary recipient(s). Value null means not specified.
            </summary>
            <remarks>Contains the address(es) of the primary recipient(s) of the message.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_Message.Cc">
            <summary>
            Gets or sets carbon-copy recipient mailbox. Value null means not specified.
            </summary>
            <remarks>Contains the addresses of others who are to receive the message, though the content of the message may not be directed at them.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_Message.iletiTip">
            <summary>
            Gets or sets KEP message type. Value null means not specified.
            </summary>
            <remarks>Defined prefix by ETSI TS102 640 and defined suffix by BTK (TR)</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_Message.iletiID">
            <summary>
            Gets or sets KEP message type identifier. Value null means not specified.
            </summary>
            <remarks>Defined prefix by ETSI TS102 640 and defined suffix by BTK (TR)</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_Message.iletiGunSayac">
            <summary>
            Gets or sets KEP message answering day value. Value null means not specified.
            </summary>
            <remarks>Defined prefix by ETSI TS102 640 and defined suffix by BTK (TR)</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_Message.iletiDetay">
            <summary>
            Gets or sets KEP message type additional identifier. Value null means not specified.
            </summary>
            <remarks>Defined prefix by ETSI TS102 640 and defined suffix by BTK (TR)</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_Message.MessageID">
            <summary>
            Gets or sets message identifier. Value null means not specified.
            </summary>
            <remarks>Contains a single unique message identifier that refers to a particular version of a particular message. 
            If the message is resent without changes, the original Message-ID is retained.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_Message.Subject">
            <summary>
            Gets or sets topic of message. Value null means not specified.
            </summary>
            <remarks>Contains a short string identifying the topic of the message.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_Message.Attachments">
            <summary>
            Gets this message attachments.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_Message.BodyText">
            <summary>
            Gets message body text. Returns null if no body text available.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_Message.BodyHtmlText">
            <summary>
            Gets message body html text. Returns null if no body html text available.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_Message.ReturnPath">
            <summary>
            Gets message return path. Value null means not specified.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_Message.DeliveredTo">
            <summary>
            Gets message delivered recipient. Value null means not specified.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_Message.EnvelopeTo">
            <summary>
            Gets message envelope recipient. Value null means not specified.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_Message.ReplyTo">
            <summary>
            Gets mailbox for replies to message. Value null means not specified.
            </summary>
            <remarks>When the "Reply-To:" field is present, it indicates the mailbox(es) to which the author of 
            the message suggests that replies be sent.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_Message.xRemMsgType">
            <summary>
            Gets KEP message type X-REM-Msg-Type. Value null means not specified.
            </summary>
            <remarks>Defined prefix by ETSI TS102 640 </remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_Message.xRemHashAlgorithm">
            <summary>
            Gets KEP message hash algorithm X-REM-hashAlgorithm. Value null means not specified.
            </summary>
            <remarks>Defined prefix by ETSI TS102 640 </remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_Message.xRemHashValue">
            <summary>
            Gets KEP message hash value X-REM-hashValue. Value null means not specified.
            </summary>
            <remarks>Defined prefix by ETSI TS102 640 </remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_Message.xRemUAMessageIdentifier">
            <summary>
            Gets KEP message user agent message identifier X-REM-UAMessageIdentifier. Value null means not specified.
            </summary>
            <remarks>Orginal message's MessageID field value. Defined prefix by ETSI TS102 640 </remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_Message.xRemMessageIDbyREMMD">
            <summary>
            Gets KEP dispatch message identifier by KEPHS  X-REM-MessageIdentifierByREMMD. Value null means not specified.
            </summary>
            <remarks>Contains a single unique message identifier that refers to a particular version of a particular dispatch. Defined prefix by ETSI TS102 640 </remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_Message.xREMEvidenceIdentifier">
            <summary>
            Gets KEP evidence identifier X-REM-EvidenceIdentifier. Value null means not specified.
            </summary>
            <remarks>Contains a single unique message identifier that refers to a particular version of a particular dispatch. Defined prefix by ETSI TS102 640 </remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_Message.xRemEvidenceType">
            <summary>
            Gets KEP evidence type X-REM-EvidenceType. Value null means not specified.
            </summary>
            <remarks>Contains a single unique message identifier that refers to a particular version of a particular dispatch. Defined prefix by ETSI TS102 640 </remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_Message.xREMEventCode">
            <summary>
            Gets KEP evidence event code X-REM-EventCode. Value null means not specified.
            </summary>
            <remarks>Contains a single unique message identifier that refers to a particular version of a particular dispatch. Defined prefix by ETSI TS102 640 </remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="T:com.verion.uniapi.Mail.Mail_t_Address">
            <summary>
            This class represents RFC 5322 3.4 Address class. 
            This class is base class for <see cref="T:com.verion.uniapi.Mail.Mail_t_Mailbox">mailbox address</see> and <see cref="T:com.verion.uniapi.Mail.Mail_t_Group">group address</see>.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_t_Address.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_t_Address.ToString(com.verion.uniapi.MIME.MIME_Encoding_EncodedWord)">
            <summary>
            Returns address as string value.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <returns>Returns address as string value.</returns>
        </member>
        <member name="T:com.verion.uniapi.Mail.Mail_t_AddressList">
            <summary>
            This class represents <b>address-list</b>. Defined in RFC 5322 3.4.
            </summary>
            <example>
            <code>
            RFC 5322.
                address-list = (address *("," address))
                address      = mailbox / group
            </code>
            </example>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_t_AddressList.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_t_AddressList.Parse(System.String)">
            <summary>
            Parses <b>address-list</b> from specified string value.
            </summary>
            <param name="value">The <b>address-list</b> string value.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when <b>value</b> is not valid <b>address-list</b> value.</exception>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_t_AddressList.Insert(System.Int32,com.verion.uniapi.Mail.Mail_t_Address)">
            <summary>
            Inserts a address into the collection at the specified location.
            </summary>
            <param name="index">The location in the collection where you want to add the item.</param>
            <param name="value">Address to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when <b>index</b> is out of range.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_t_AddressList.Add(com.verion.uniapi.Mail.Mail_t_Address)">
            <summary>
            Adds specified address to the end of the collection.
            </summary>
            <param name="value">Address to add.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference value.</exception>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_t_AddressList.Remove(com.verion.uniapi.Mail.Mail_t_Address)">
            <summary>
            Removes specified item from the collection.
            </summary>
            <param name="value">Address to remove.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference value.</exception>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_t_AddressList.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_t_AddressList.ToArray">
            <summary>
            Copies addresses to new array.
            </summary>
            <returns>Returns addresses array.</returns>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_t_AddressList.ToString">
            <summary>
            Returns address-list as string.
            </summary>
            <returns>Returns address-list as string.</returns>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_t_AddressList.AcceptChanges">
            <summary>
            Resets IsModified property to false.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_t_AddressList.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_t_AddressList.IsModified">
            <summary>
            Gets if list has modified since it was loaded.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_t_AddressList.Count">
            <summary>
            Gets number of items in the collection.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_t_AddressList.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <returns>Returns the element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when <b>index</b> is out of range.</exception>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_t_AddressList.Mailboxes">
            <summary>
            Gets this address list mailboxes(group address mailboxes + mailboxes).
            </summary>
        </member>
        <member name="T:com.verion.uniapi.Mail.Mail_t_Group">
            <summary>
            This class represents "group" address. Defined in RFC 5322 3.4.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_t_Group.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="displayName">Display name. Value null means not specified.</param>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_t_Group.ToString">
            <summary>
            Returns mailbox as string.
            </summary>
            <returns>Returns mailbox as string.</returns>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_t_Group.ToString(com.verion.uniapi.MIME.MIME_Encoding_EncodedWord)">
            <summary>
            Returns address as string value.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <returns>Returns address as string value.</returns>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_t_Group.DisplayName">
            <summary>
            Gets or sets diplay name. Value null means not specified.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_t_Group.Members">
            <summary>
            Gets groiup address members collection.
            </summary>
        </member>
        <member name="T:com.verion.uniapi.Mail.Mail_t_Mailbox">
            <summary>
            This class represents "mailbox" address. Defined in RFC 5322 3.4.
            </summary>
            <example>
            <code>
            RFC 5322 3.4.
                mailbox    = name-addr / addr-spec
                name-addr  = [display-name] angle-addr
                angle-addr = [CFWS] "&lt;" addr-spec "&gt;" [CFWS]
                addr-spec  = local-part "@" domain
            </code>
            </example>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_t_Mailbox.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="displayName">Display name. Value null means not specified.</param>
            <param name="address">Email address.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>address</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_t_Mailbox.Parse(System.String)">
            <summary>
            Parses <b>mailbox</b> from specified string value.
            </summary>
            <param name="value">The <b>mailbox</b> string value.</param>
            <returns>Returns parse mailbox.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when <b>value</b> is not valid <b>mailbox</b> value.</exception>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_t_Mailbox.ToString">
            <summary>
            Returns mailbox as string.
            </summary>
            <returns>Returns mailbox as string.</returns>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_t_Mailbox.ToString(com.verion.uniapi.MIME.MIME_Encoding_EncodedWord)">
            <summary>
            Returns address as string value.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <returns>Returns address as string value.</returns>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_t_Mailbox.DisplayName">
            <summary>
            Gets display name. Value null means not specified.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_t_Mailbox.Address">
            <summary>
            Gets address.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_t_Mailbox.LocalPart">
            <summary>
            Gets local-part of address.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_t_Mailbox.Domain">
            <summary>
            Gets domain part of address.
            </summary>
        </member>
        <member name="T:com.verion.uniapi.Mail.Mail_t_MailboxList">
            <summary>
            This class represents <b>mailbox-list</b>. Defined in RFC 5322 3.4.
            </summary>
            <example>
            <code>
            RFC 5322.
                mailbox-list =  (mailbox *("," mailbox)) / obs-mbox-list
            </code>
            </example>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_t_MailboxList.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_t_MailboxList.Parse(System.String)">
            <summary>
            Parses <b>mailbox-list</b> from specified string value.
            </summary>
            <param name="value">The <b>mailbox-list</b> string value.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when <b>value</b> is not valid <b>mailbox-list</b> value.</exception>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_t_MailboxList.Insert(System.Int32,com.verion.uniapi.Mail.Mail_t_Mailbox)">
            <summary>
            Inserts a address into the collection at the specified location.
            </summary>
            <param name="index">The location in the collection where you want to add the item.</param>
            <param name="value">Address to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when <b>index</b> is out of range.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_t_MailboxList.Add(com.verion.uniapi.Mail.Mail_t_Mailbox)">
            <summary>
            Adds specified address to the end of the collection.
            </summary>
            <param name="value">Address to add.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference value.</exception>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_t_MailboxList.Remove(com.verion.uniapi.Mail.Mail_t_Mailbox)">
            <summary>
            Removes specified item from the collection.
            </summary>
            <param name="value">Address to remove.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference value.</exception>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_t_MailboxList.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_t_MailboxList.ToArray">
            <summary>
            Copies addresses to new array.
            </summary>
            <returns>Returns addresses array.</returns>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_t_MailboxList.ToString">
            <summary>
            Returns address-list as string.
            </summary>
            <returns>Returns address-list as string.</returns>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_t_MailboxList.AcceptChanges">
            <summary>
            Resets IsModified property to false.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_t_MailboxList.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_t_MailboxList.IsModified">
            <summary>
            Gets if list has modified since it was loaded.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_t_MailboxList.Count">
            <summary>
            Gets number of items in the collection.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_t_MailboxList.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <returns>Returns the element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when <b>index</b> is out of range.</exception>
        </member>
        <member name="T:com.verion.uniapi.Mail.Mail_t_TcpInfo">
            <summary>
            Represents Received: header "TCP-info" value. Defined in RFC 5321. 4.4.
            </summary>
            <remarks>
            <code>
            RFC 5321 4.4.
                TCP-info        = address-literal / ( Domain FWS address-literal )
                address-literal = "[" ( IPv4-address-literal / IPv6-address-literal / General-address-literal ) "]"
            </code>
            </remarks>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_t_TcpInfo.#ctor(System.Net.IPAddress,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="ip">IP address.</param>
            <param name="hostName">Host name.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_t_TcpInfo.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_t_TcpInfo.IP">
            <summary>
            Gets IP address.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.Mail.Mail_t_TcpInfo.HostName">
            <summary>
            Gets host value. Value null means not specified.
            </summary>
        </member>
        <member name="T:com.verion.uniapi.Mail.Mail_Utils">
            <summary>
            This class provides mail message related utility methods.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.Mail.Mail_Utils.SMTP_Mailbox(com.verion.uniapi.MIME.MIME_Reader)">
            <summary>
            Reads SMTP "Mailbox" from the specified MIME reader.
            </summary>
            <param name="reader">MIME reader.</param>
            <returns>Returns SMTP "Mailbox" or null if no SMTP mailbox available.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>reader</b> is null reference.</exception>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_b">
            <summary>
            This class is base class for MIME entity bodies.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b.#ctor(com.verion.uniapi.MIME.MIME_h_ContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b.Parse(com.verion.uniapi.MIME.MIME_Entity,com.verion.uniapi.MIME.MIME_h_ContentType,com.verion.utils.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b.SetParent(com.verion.uniapi.MIME.MIME_Entity,System.Boolean)">
            <summary>
            Sets body parent.
            </summary>
            <param name="entity">Owner entity.</param>
            <param name="setContentType">If true sets entity.ContentType header value.</param>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b.ToStream(System.IO.Stream,com.verion.uniapi.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Stores MIME entity body to the specified stream.
            </summary>
            <param name="stream">Stream where to store body data.</param>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <param name="headerReencode">If true always specified encoding is used for header. If false and header field value not modified, 
            original encoding is kept.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_b.IsModified">
            <summary>
            Gets if body has modified.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_b.Entity">
            <summary>
            Gets body owner entity. Returns null if body not bounded to any entity yet.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_b.MediaType">
            <summary>
            Gets body media type. For example: 'text/plain'.
            </summary>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_b_Application">
            <summary>
            This class represents MIME application/xxx bodies. Defined in RFC 2046 4.2.
            </summary>
            <remarks>
            The "application" media type is to be used for discrete data which do
            not fit in any of the other categories, and particularly for data to
            be processed by some type of application program.
            </remarks>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_Application.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="mediaType">MIME media type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>mediaType</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_Application.Parse(com.verion.uniapi.MIME.MIME_Entity,com.verion.uniapi.MIME.MIME_h_ContentType,com.verion.utils.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>strean</b> is null reference.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_b_ApplicationPkcs7Mime">
            <summary>
            This class represents MIME application/pkcs7-mime body. Defined in RFC 5751 3.2.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_ApplicationPkcs7Mime.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_ApplicationPkcs7Mime.Parse(com.verion.uniapi.MIME.MIME_Entity,com.verion.uniapi.MIME.MIME_h_ContentType,com.verion.utils.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>strean</b> is null reference.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_ApplicationPkcs7Mime.GetCertificates">
            <summary>
            Gets certificates contained in pkcs 7.
            </summary>
            <returns>Returns certificates contained in pkcs 7. Returns null if no certificates.</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_ApplicationPkcs7Mime.VerifySignature">
            <summary>
            Checks if signature is valid and data not altered.
            </summary>
            <returns>Returns true if signature is valid, otherwise false.</returns>
            <remarks>This method is valid only if <b>Content-Type</b> parameter <b>smime-type=signed-data</b>.</remarks>
            <exception cref="T:System.InvalidOperationException">Is raised when <b>smime-type != signed-data</b>.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_ApplicationPkcs7Mime.GetSignedMime">
            <summary>
            Gets signed mime content. Value null means no content.
            </summary>
            <returns>Returns signed mime content. Value null means no content.</returns>
            <remarks>This method is valid only if <b>Content-Type</b> parameter <b>smime-type=signed-data</b>.</remarks>
            <exception cref="T:System.InvalidOperationException">Is raised when <b>smime-type != signed-data</b>.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_ApplicationPkcs7Mime.GetEnvelopedMime(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Decrypts enveloped mime content.
            </summary>
            <param name="cert">Decrypting certificate.</param>
            <returns>Returns decrypted enveloped mime content.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>cert</b> is null reference.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when <b>smime-type != enveloped-data</b>.</exception>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_b_Audio">
            <summary>
            This class represents MIME audio/xxx bodies. Defined in RFC 2046 4.3.
            </summary>
            <remarks>A media type of "audio" indicates that the body contains audio data.</remarks>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_Audio.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="mediaType">MIME media type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>mediaType</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_Audio.Parse(com.verion.uniapi.MIME.MIME_Entity,com.verion.uniapi.MIME.MIME_h_ContentType,com.verion.utils.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_b_Image">
            <summary>
            This class represents MIME image/xxx bodies. Defined in RFC 2046 4.2.
            </summary>
            <remarks>
            A media type of "image" indicates that the body contains an image.
            The subtype names the specific image format.
            </remarks>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_Image.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="mediaType">MIME media type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>mediaType</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_Image.Parse(com.verion.uniapi.MIME.MIME_Entity,com.verion.uniapi.MIME.MIME_h_ContentType,com.verion.utils.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_b_KEP">
            <summary>
            This class is base class for MIME entity bodies.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_KEP.#ctor(com.verion.uniapi.MIME.MIME_h_ContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_KEP.Parse(com.verion.uniapi.MIME.MIME_Entity,com.verion.uniapi.MIME.MIME_h_ContentType,com.verion.utils.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_KEP.SetParent(com.verion.uniapi.MIME.MIME_Entity_KEP,System.Boolean)">
            <summary>
            Sets body parent.
            </summary>
            <param name="entity">Owner entity.</param>
            <param name="setContentType">If true sets entity.ContentType header value.</param>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_KEP.ToStream(System.IO.Stream,com.verion.uniapi.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Stores MIME entity body to the specified stream.
            </summary>
            <param name="stream">Stream where to store body data.</param>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <param name="headerReencode">If true always specified encoding is used for header. If false and header field value not modified, 
            original encoding is kept.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_b_KEP.IsModified">
            <summary>
            Gets if body has modified.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_b_KEP.Entity">
            <summary>
            Gets body owner entity. Returns null if body not bounded to any entity yet.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_b_KEP.MediaType">
            <summary>
            Gets body media type. For example: 'text/plain'.
            </summary>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_b_KEPProvider">
            <summary>
            This class represent MIME entity body provider.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_KEPProvider.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_KEPProvider.Parse(com.verion.uniapi.MIME.MIME_Entity_KEP,com.verion.utils.IO.SmartStream,com.verion.uniapi.MIME.MIME_h_ContentType)">
            <summary>
            Parses MIME entity body from specified stream.
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="stream">Stream from where to parse entity body.</param>
            <param name="defaultContentType">Default content type.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b>, <b>strean</b> or <b>defaultContentType</b> is null reference.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_b_Message">
            <summary>
            This class represents MIME message/xxx bodies. Defined in RFC 2046 5.2.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_Message.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="mediaType">MIME media type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>mediaType</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_Message.Parse(com.verion.uniapi.MIME.MIME_Entity,com.verion.uniapi.MIME.MIME_h_ContentType,com.verion.utils.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_b_MessageDeliveryStatus">
            <summary>
            This class represents MIME <b>message/delivery-status</b> body. Defined in RFC 3464.
            </summary>
            <remarks>
            <code>
            delivery-status-content =  per-message-fields 1*( CRLF per-recipient-fields )
            
            per-message-fields =
                       [ original-envelope-id-field CRLF ]
                       reporting-mta-field CRLF
                       [ dsn-gateway-field CRLF ]
                       [ received-from-mta-field CRLF ]
                       [ arrival-date-field CRLF ]
                       *( extension-field CRLF )
                       
            per-recipient-fields =
                     [ original-recipient-field CRLF ]
                     final-recipient-field CRLF
                     action-field CRLF
                     status-field CRLF
                     [ remote-mta-field CRLF ]
                     [ diagnostic-code-field CRLF ]
                     [ last-attempt-date-field CRLF ]
                     [ final-log-id-field CRLF ]
                     [ will-retry-until-field CRLF ]
                    *( extension-field CRLF )
            </code>
            </remarks>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_MessageDeliveryStatus.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_MessageDeliveryStatus.Parse(com.verion.uniapi.MIME.MIME_Entity,com.verion.uniapi.MIME.MIME_h_ContentType,com.verion.utils.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_MessageDeliveryStatus.ToStream(System.IO.Stream,com.verion.uniapi.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Stores MIME entity body to the specified stream.
            </summary>
            <param name="stream">Stream where to store body data.</param>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <param name="headerReencode">If true always specified encoding is used for header. If false and header field value not modified, 
            original encoding is kept.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_b_MessageDeliveryStatus.IsModified">
            <summary>
            Gets if body has modified.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_b_MessageDeliveryStatus.MessageFields">
            <summary>
            Gets per-message fields collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is accessed and this body is not bounded to any entity.</exception>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_b_MessageDeliveryStatus.RecipientBlocks">
            <summary>
            Gets reciepent report blocks collection.
            </summary>
            <remarks>Each block contains per-recipient-fields.</remarks>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_b_MessageRfc822">
            <summary>
            This class represents MIME message/rfc822 body. Defined in RFC 2046 5.2.1.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_MessageRfc822.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_MessageRfc822.Parse(com.verion.uniapi.MIME.MIME_Entity,com.verion.uniapi.MIME.MIME_h_ContentType,com.verion.utils.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_MessageRfc822.ToStream(System.IO.Stream,com.verion.uniapi.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Stores MIME entity body to the specified stream.
            </summary>
            <param name="stream">Stream where to store body data.</param>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <param name="headerReencode">If true always specified encoding is used for header. If false and header field value not modified, 
            original encoding is kept.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_b_MessageRfc822.IsModified">
            <summary>
            Gets if body has modified.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_b_MessageRfc822.Message">
            <summary>
            Gets embbed mail message.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null reference passed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is accessed and this body is not bounded to any entity.</exception>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_b_Multipart">
            <summary>
            This class represents MIME application/xxx bodies. Defined in RFC 2046 5.1.
            </summary>
            <remarks>
            The "multipart" represents single MIME body containing multiple child MIME entities.
            The "multipart" body must contain at least 1 MIME entity.
            </remarks>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_b_Multipart._MultipartReader">
            <summary>
            Implements  multipart "body parts" reader.
            </summary>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_b_Multipart._MultipartReader.State">
            <summary>
            This enum specified multipart reader sate.
            </summary>
        </member>
        <member name="F:com.verion.uniapi.MIME.MIME_b_Multipart._MultipartReader.State.SeekFirst">
            <summary>
            First boundary must be seeked.
            </summary>
        </member>
        <member name="F:com.verion.uniapi.MIME.MIME_b_Multipart._MultipartReader.State.ReadNext">
            <summary>
            Read next boundary. (Method Next must be called to continue next boundary reading)
            </summary>
        </member>
        <member name="F:com.verion.uniapi.MIME.MIME_b_Multipart._MultipartReader.State.InBoundary">
            <summary>
            Active boundary reading pending.
            </summary>
        </member>
        <member name="F:com.verion.uniapi.MIME.MIME_b_Multipart._MultipartReader.State.Done">
            <summary>
            All boundraies readed.
            </summary>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_b_Multipart._MultipartReader._DataLine">
            <summary>
            This class holds readed data line info.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_Multipart._MultipartReader._DataLine.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_Multipart._MultipartReader._DataLine.AssignFrom(com.verion.utils.IO.SmartStream.ReadLineAsyncOP)">
            <summary>
            Assigns data line info from rea line operation.
            </summary>
            <param name="op">Read line operation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_b_Multipart._MultipartReader._DataLine.LineBuffer">
            <summary>
            Gets line data buffer.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_b_Multipart._MultipartReader._DataLine.BytesInBuffer">
            <summary>
            Gets number of bytes used in <b>LineBuffer</b>.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_Multipart._MultipartReader.#ctor(com.verion.utils.IO.SmartStream,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Stream from where to read body part.</param>
            <param name="boundary">Boundry ID what separates body parts.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> or <b>boundary</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_Multipart._MultipartReader.Next">
            <summary>
            Moves to next "body part". Returns true if moved to next "body part" or false if there are no more parts.
            </summary>
            <returns>Returns true if moved to next "body part" or false if there are no more body parts.</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_Multipart._MultipartReader.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_Multipart._MultipartReader.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_Multipart._MultipartReader.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="M:com.verion.uniapi.MIME.MIME_b_Multipart._MultipartReader.Seek(System.Int64,System.IO.SeekOrigin)">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_Multipart._MultipartReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_Multipart._MultipartReader.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_b_Multipart._MultipartReader.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_b_Multipart._MultipartReader.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_b_Multipart._MultipartReader.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_b_Multipart._MultipartReader.Length">
            <summary>
            Gets the length in bytes of the stream.  This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.NotSupportedException">Is raised when this property is accessed.</exception>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_b_Multipart._MultipartReader.Position">
            <summary>
            Gets or sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.NotSupportedException">Is raised when this property is accessed.</exception>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_b_Multipart._MultipartReader.TextPreamble">
            <summary>
            Gets "preamble" text. Defined in RFC 2046 5.1.1.
            </summary>
            <remarks>Preamble text is text between MIME entiy headers and first boundary.</remarks>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_b_Multipart._MultipartReader.TextEpilogue">
            <summary>
            Gets "epilogue" text. Defined in RFC 2046 5.1.1.
            </summary>
            <remarks>Epilogue text is text after last boundary end.</remarks>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_b_Multipart._MultipartReader.ReaderState">
            <summary>
            Gets reader state.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_Multipart.#ctor(com.verion.uniapi.MIME.MIME_h_ContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_Multipart.Parse(com.verion.uniapi.MIME.MIME_Entity,com.verion.uniapi.MIME.MIME_h_ContentType,com.verion.utils.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_Multipart.ParseInternal(com.verion.uniapi.MIME.MIME_Entity,System.String,com.verion.utils.IO.SmartStream,com.verion.uniapi.MIME.MIME_b_Multipart)">
            <summary>
            Internal body parsing.
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="mediaType">MIME media type. For example: text/plain.</param>
            <param name="stream">Stream from where to read body.</param>
            <param name="body">Multipart body instance.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>mediaType</b>, <b>stream</b> or <b>body</b> is null reference.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_Multipart.SetParent(com.verion.uniapi.MIME.MIME_Entity,System.Boolean)">
            <summary>
            Sets body parent.
            </summary>
            <param name="entity">Owner entity.</param>
            <param name="setContentType">If true sets entity.ContentType header value.</param>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_Multipart.ToStream(System.IO.Stream,com.verion.uniapi.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Stores MIME entity body to the specified stream.
            </summary>
            <param name="stream">Stream where to store body data.</param>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <param name="headerReencode">If true always specified encoding is used for header. If false and header field value not modified, 
            original encoding is kept.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_b_Multipart.IsModified">
            <summary>
            Gets if body has modified.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_b_Multipart.DefaultBodyPartContentType">
            <summary>
            Gets default body part Content-Type. For more info see RFC 2046 5.1.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_b_Multipart.BodyParts">
            <summary>
            Gets multipart body body-parts collection.
            </summary>
            <remarks>Multipart entity child entities are called "body parts" in RFC 2045.</remarks>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_b_Multipart.TextPreamble">
            <summary>
            Gets or sets "preamble" text. Defined in RFC 2046 5.1.1.
            </summary>
            <remarks>Preamble text is text between MIME entiy headers and first boundary.</remarks>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_b_Multipart.TextEpilogue">
            <summary>
            Gets or sets "epilogue" text. Defined in RFC 2046 5.1.1.
            </summary>
            <remarks>Epilogue text is text after last boundary end.</remarks>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_b_MultipartAlternative">
            <summary>
            This class represents MIME multipart/alternative body. Defined in RFC 2046 5.1.4.
            </summary>
            <remarks>
            The "multipart/alternative" is intended for use when each of the body parts is an "alternative" version of the same information.
            In general, user agents that compose "multipart/alternative" entities
            must place the body parts in increasing order of preference, that is,
            with the preferred format last.
            </remarks>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_MultipartAlternative.#ctor(com.verion.uniapi.MIME.MIME_h_ContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_MultipartAlternative.Parse(com.verion.uniapi.MIME.MIME_Entity,com.verion.uniapi.MIME.MIME_h_ContentType,com.verion.utils.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_b_MultipartDigest">
            <summary>
            This class represents MIME multipart/digest body. Defined in RFC 2046 5.1.5.
            </summary>
            <remarks>
            The "multipart/digest" Content-Type is intended to be used to send collections of messages.
            </remarks>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_MultipartDigest.#ctor(com.verion.uniapi.MIME.MIME_h_ContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_MultipartDigest.Parse(com.verion.uniapi.MIME.MIME_Entity,com.verion.uniapi.MIME.MIME_h_ContentType,com.verion.utils.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_b_MultipartDigest.DefaultBodyPartContentType">
            <summary>
            Gets default body part Content-Type. For more info see RFC 2046 5.1.
            </summary>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_b_MultipartEncrypted">
            <summary>
            This class represents MIME multipart/encrypted body. Defined in rfc 1847.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_MultipartEncrypted.#ctor(com.verion.uniapi.MIME.MIME_h_ContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_MultipartEncrypted.Parse(com.verion.uniapi.MIME.MIME_Entity,com.verion.uniapi.MIME.MIME_h_ContentType,com.verion.utils.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_b_MultipartFormData">
            <summary>
            This class represents MIME multipart/form-data body. Defined in RFC 2046.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_MultipartFormData.#ctor(com.verion.uniapi.MIME.MIME_h_ContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_MultipartFormData.Parse(com.verion.uniapi.MIME.MIME_Entity,com.verion.uniapi.MIME.MIME_h_ContentType,com.verion.utils.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_b_MultipartMixed">
            <summary>
            This class represents MIME multipart/mixed body. Defined in RFC 2046 5.1.3.
            </summary>
            <remarks>
            The "mixed" subtype of "multipart" is intended for use when the body
            parts are independent and need to be bundled in a particular order.
            </remarks>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_MultipartMixed.#ctor(com.verion.uniapi.MIME.MIME_h_ContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_MultipartMixed.Parse(com.verion.uniapi.MIME.MIME_Entity,com.verion.uniapi.MIME.MIME_h_ContentType,com.verion.utils.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_b_MultipartParallel">
            <summary>
            This class represents MIME multipart/parallel bodies.  Defined in RFC 2046 5.1.6.
            </summary>
            <remarks>
            The "parallel" subtype of "multipart" is intended for use when the body
            parts are independent and their order is not important. Parts can be processed parallel.
            </remarks>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_MultipartParallel.#ctor(com.verion.uniapi.MIME.MIME_h_ContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_MultipartParallel.Parse(com.verion.uniapi.MIME.MIME_Entity,com.verion.uniapi.MIME.MIME_h_ContentType,com.verion.utils.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_b_MultipartRelated">
            <summary>
            This class represents MIME multipart/related body. Defined in RFC 2387.
            </summary>
            <remarks>
             The Multipart/Related content-type provides a common mechanism for
             representing objects that are aggregates of related MIME body parts.
            </remarks>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_MultipartRelated.#ctor(com.verion.uniapi.MIME.MIME_h_ContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_MultipartRelated.Parse(com.verion.uniapi.MIME.MIME_Entity,com.verion.uniapi.MIME.MIME_h_ContentType,com.verion.utils.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_b_MultipartReport">
            <summary>
            This class represents MIME multipart/report body. Defined in RFC 3462.
            </summary>
            <remarks>
            The Multipart/Report Multipurpose Internet Mail Extensions (MIME) content-type is a general "family" or 
            "container" type for electronic mail reports of any kind. The most used type is <b>delivery-status</b>.
            </remarks>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_MultipartReport.#ctor(com.verion.uniapi.MIME.MIME_h_ContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_MultipartReport.Parse(com.verion.uniapi.MIME.MIME_Entity,com.verion.uniapi.MIME.MIME_h_ContentType,com.verion.utils.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_b_MultipartSigned">
            <summary>
            This class represents MIME multipart/signed body. Defined in RFC 5751.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_MultipartSigned.#ctor(com.verion.uniapi.MIME.MIME_h_ContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_MultipartSigned.Parse(com.verion.uniapi.MIME.MIME_Entity,com.verion.uniapi.MIME.MIME_h_ContentType,com.verion.utils.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>mediaTypedefaultContentTypeb></b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_b_Provider">
            <summary>
            This class represent MIME entity body provider.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_Provider.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_Provider.Parse(com.verion.uniapi.MIME.MIME_Entity,com.verion.utils.IO.SmartStream,com.verion.uniapi.MIME.MIME_h_ContentType)">
            <summary>
            Parses MIME entity body from specified stream.
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="stream">Stream from where to parse entity body.</param>
            <param name="defaultContentType">Default content type.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b>, <b>strean</b> or <b>defaultContentType</b> is null reference.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_b_SinglepartBase">
            <summary>
            This class is base class for singlepart media bodies like: text,video,audio,image.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_SinglepartBase.#ctor(com.verion.uniapi.MIME.MIME_h_ContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_SinglepartBase.Finalize">
            <summary>
            Destructor - Just incase user won't call dispose.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_SinglepartBase.SetParent(com.verion.uniapi.MIME.MIME_Entity,System.Boolean)">
            <summary>
            Sets body parent.
            </summary>
            <param name="entity">Owner entity.</param>
            <param name="setContentType">If true sets entity.ContentType header value.</param>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_SinglepartBase.ToStream(System.IO.Stream,com.verion.uniapi.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Stores MIME entity body to the specified stream.
            </summary>
            <param name="stream">Stream where to store body data.</param>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <param name="headerReencode">If true always specified encoding is used for header. If false and header field value not modified, 
            original encoding is kept.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_SinglepartBase.SetModified(System.Boolean)">
            <summary>
            Sets IsModified property value.
            </summary>
            <param name="isModified">Modified flag.</param>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_SinglepartBase.GetEncodedDataStream">
            <summary>
            Gets body encoded data stream.
            </summary>
            <returns>Returns body encoded data stream.</returns>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is accessed and this body is not bounded to any entity.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_SinglepartBase.SetEncodedData(System.String,System.IO.Stream)">
            <summary>
            Sets body encoded data from specified stream.
            </summary>
            <param name="contentTransferEncoding">Content-Transfer-Encoding in what encoding <b>stream</b> data is.</param>
            <param name="stream">Stream data to add.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentTransferEncoding</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the argumennts has invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is accessed and this body is not bounded to any entity.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_SinglepartBase.GetDataStream">
            <summary>
            Gets body decoded data stream.
            </summary>
            <returns>Returns body decoded data stream.</returns>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is accessed and this body is not bounded to any entity.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when body contains not supported Content-Transfer-Encoding.</exception>
            <remarks>The returned stream should be closed/disposed as soon as it's not needed any more.</remarks>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_SinglepartBase.SetData(System.IO.Stream,System.String)">
            <summary>
            Sets body data from the specified stream.
            </summary>
            <param name="stream">Source stream.</param>
            <param name="transferEncoding">Specifies content-transfer-encoding to use to encode data.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> or <b>transferEncoding</b> is null reference.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is accessed and this body is not bounded to any entity.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_SinglepartBase.SetDataFromFile(System.String,System.String)">
            <summary>
            Sets body data from the specified file.
            </summary>
            <param name="file">File name with optional path.</param>
            <param name="transferEncoding">Specifies content-transfer-encoding to use to encode data.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>file</b> is null reference.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is accessed and this body is not bounded to any entity.</exception>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_b_SinglepartBase.IsModified">
            <summary>
            Gets if body has modified.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_b_SinglepartBase.EncodedDataSize">
            <summary>
            Gets encoded body data size in bytes.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_b_SinglepartBase.EncodedData">
            <summary>
            Gets body encoded data. 
            </summary>
            <remarks>NOTE: Use this property with care, because body data may be very big and you may run out of memory.
            For bigger data use <see cref="M:com.verion.uniapi.MIME.MIME_b_SinglepartBase.GetEncodedDataStream"/> method instead.</remarks>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_b_SinglepartBase.Data">
            <summary>
            Gets body decoded data.
            </summary>
            <remarks>NOTE: Use this property with care, because body data may be very big and you may run out of memory.
            For bigger data use <see cref="M:com.verion.uniapi.MIME.MIME_b_SinglepartBase.GetDataStream"/> method instead.</remarks>
            <exception cref="T:System.NotSupportedException">Is raised when body contains not supported Content-Transfer-Encoding.</exception>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_b_SinglepartBase.EncodedStream">
            <summary>
            Gets encoded data stream.
            </summary>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_b_Text">
            <summary>
            This class represents MIME text/xxx bodies. Defined in RFC 2045.
            </summary>
            <remarks>
            The "text" media type is intended for sending material which is principally textual in form.
            </remarks>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_Text.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="mediaType">MIME media type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>mediaSubType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_Text.Parse(com.verion.uniapi.MIME.MIME_Entity,com.verion.uniapi.MIME.MIME_h_ContentType,com.verion.utils.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>mediaType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_Text.SetText(System.String,System.Text.Encoding,System.String)">
            <summary>
            Sets text.
            </summary>
            <param name="transferEncoding">Content transfer encoding.</param>
            <param name="charset">Charset to use to encode text. If not sure, utf-8 is recommended.</param>
            <param name="text">Text.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>transferEncoding</b>, <b>charset</b> or <b>text</b> is null reference.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is accessed and this body is not bounded to any entity.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when body contains not supported Content-Transfer-Encoding.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_Text.GetCharset">
            <summary>
            Gets charset from Content-Type. If char set isn't specified, "ascii" is defined as default and it will be returned.
            </summary>
            <returns>Returns content charset.</returns>
            <exception cref="T:System.ArgumentException">Is raised when Content-Type has not supported charset parameter value.</exception>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_b_Text.Text">
            <summary>
            Gets body decoded text.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when not supported content-type charset or not supported content-transfer-encoding value.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when body contains not supported Content-Transfer-Encoding.</exception>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_b_Unknown">
            <summary>
            This class represents MIME unknown bodies.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_Unknown.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="mediaType">MIME media type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>mediaType</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_Unknown.Parse(com.verion.uniapi.MIME.MIME_Entity,com.verion.uniapi.MIME.MIME_h_ContentType,com.verion.utils.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>strean</b> is null reference.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_b_Video">
            <summary>
            This class represents MIME video/xxx bodies. Defined in RFC 2046 4.4.
            </summary>
            <remarks>
            A media type of "video" indicates that the body contains a time-
            varying-picture image, possibly with color and coordinated sound.
            </remarks>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_Video.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="mediaType">MIME media type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>mediaType</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_Video.Parse(com.verion.uniapi.MIME.MIME_Entity,com.verion.uniapi.MIME.MIME_h_ContentType,com.verion.utils.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>mediaType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_DispositionTypes">
            <summary>
            This class holds MIME content disposition types. Defined in RFC 2183.
            </summary>
        </member>
        <member name="F:com.verion.uniapi.MIME.MIME_DispositionTypes.Inline">
            <summary>
            A bodypart should be marked `inline' if it is intended to be displayed automatically upon display of the message. 
            Inline bodyparts should be presented in the order in which they occur, subject to the normal semantics of multipart messages.
            </summary>
        </member>
        <member name="F:com.verion.uniapi.MIME.MIME_DispositionTypes.Attachment">
            <summary>
            Bodyparts can be designated `attachment' to indicate that they are separate from the main body of the mail message, 
            and that their display should not be automatic, but contingent upon some further action of the user.
            </summary>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_EncodedWordEncoding">
            <summary>
            This enum specifies MIME RFC 2047 'encoded-word' encoding method.
            </summary>
        </member>
        <member name="F:com.verion.uniapi.MIME.MIME_EncodedWordEncoding.Q">
            <summary>
            The "Q" encoding. (Quoated Printable) Defined in RFC 2047 (section 4.1).
            </summary>
        </member>
        <member name="F:com.verion.uniapi.MIME.MIME_EncodedWordEncoding.B">
            <summary>
            The "B" encoding. (Base64) Defined in RFC 2047 (section 4.2).
            </summary>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_Encoding_EncodedWord">
            <summary>
            Implements 'encoded-word' encoding. Defined in RFC 2047.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Encoding_EncodedWord.#ctor(com.verion.uniapi.MIME.MIME_EncodedWordEncoding,System.Text.Encoding)">
            <summary>
            Default constructor.
            </summary>
            <param name="encoding">Encoding to use to encode text.</param>
            <param name="charset">Charset to use for encoding. If not sure UTF-8 is strongly recommended.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>charset</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Encoding_EncodedWord.Encode(System.String)">
            <summary>
            Encodes specified text if it contains 8-bit chars, otherwise text won't be encoded.
            </summary>
            <param name="text">Text to encode.</param>
            <returns>Returns encoded text.</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Encoding_EncodedWord.Decode(System.String)">
            <summary>
            Decodes specified encoded-word.
            </summary>
            <param name="text">Encoded-word value.</param>
            <returns>Returns decoded text.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>text</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Encoding_EncodedWord.MustEncode(System.String)">
            <summary>
            Checks if specified text must be encoded.
            </summary>
            <param name="text">Text to encode.</param>
            <returns>Returns true if specified text must be encoded, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>text</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Encoding_EncodedWord.EncodeS(com.verion.uniapi.MIME.MIME_EncodedWordEncoding,System.Text.Encoding,System.Boolean,System.String)">
            <summary>
            Encodes specified text if it contains 8-bit chars, otherwise text won't be encoded.
            </summary>
            <param name="encoding">Encoding to use to encode text.</param>
            <param name="charset">Charset to use for encoding. If not sure UTF-8 is strongly recommended.</param>
            <param name="split">If true, words are splitted after 75 chars.</param>
            <param name="text">Text to encode.</param>
            <returns>Returns encoded text.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>charset</b> or <b>text</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Encoding_EncodedWord.DecodeS(System.String)">
            <summary>
            Decodes non-ascii word with MIME <b>encoded-word</b> method. Defined in RFC 2047 2.
            </summary>
            <param name="word">MIME encoded-word value.</param>
            <returns>Returns decoded word.</returns>
            <remarks>If <b>word</b> is not encoded-word or has invalid syntax, <b>word</b> is leaved as is.</remarks>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>word</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Encoding_EncodedWord.DecodeTextS(System.String)">
            <summary>
            Decodes non-ascii text with MIME <b>encoded-word</b> method. Defined in RFC 2047 2.
            </summary>
            <param name="text">Text.</param>
            <returns>Returns decoded text.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>text</b> is null reference.</exception>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_Encoding_EncodedWord.Split">
            <summary>
            Gets or sets if long words(over 75 char) are splitted.
            </summary>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_Entity">
            <summary>
            Represents a MIME entity. Defined in RFC 2045 2.4.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Entity.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Entity.Dispose">
            <summary>
            Cleans up any resources being used. This method is thread-safe.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Entity.ToFile(System.String,com.verion.uniapi.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Stores MIME entity to the specified file.
            </summary>
            <param name="file">File name with path where to store MIME entity.</param>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>file</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Entity.ToFile(System.String,com.verion.uniapi.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Stores MIME entity to the specified file.
            </summary>
            <param name="file">File name with path where to store MIME entity.</param>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <param name="headerReencode">If true always specified encoding is used for header. If false and header field value not modified, 
            original encoding is kept.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>file</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Entity.ToStream(System.IO.Stream,com.verion.uniapi.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Store MIME enity to the specified stream.
            </summary>
            <param name="stream">Stream where to store MIME entity. Storing starts form stream current position.</param>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Entity.ToStream(System.IO.Stream,com.verion.uniapi.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Store MIME enity to the specified stream.
            </summary>
            <param name="stream">Stream where to store MIME entity. Storing starts form stream current position.</param>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <param name="headerReencode">If true always specified encoding is used for header. If false and header field value not modified, 
            original encoding is kept.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Entity.ToString">
            <summary>
            Returns MIME entity as string.
            </summary>
            <returns>Returns MIME entity as string.</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Entity.ToString(com.verion.uniapi.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Returns MIME entity as string.
            </summary>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <returns>Returns MIME entity as string.</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Entity.ToString(com.verion.uniapi.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Returns MIME entity as string.
            </summary>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <param name="headerReencode">If true always specified encoding is used for header. If false and header field value not modified, 
            original encoding is kept.</param>
            <returns>Returns MIME entity as string.</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Entity.ToByte(com.verion.uniapi.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Returns MIME entity as byte[].
            </summary>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <returns>Returns MIME entity as byte[].</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Entity.ToByte(com.verion.uniapi.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Returns MIME entity as byte[].
            </summary>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <param name="headerReencode">If true always specified encoding is used for header. If false and header field value not modified, 
            original encoding is kept.</param>
            <returns>Returns MIME entity as byte[].</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Entity.Parse(com.verion.utils.IO.SmartStream,System.Text.Encoding,com.verion.uniapi.MIME.MIME_h_ContentType)">
            <summary>
            Parses MIME entiry from the specified stream.
            </summary>
            <param name="stream">Source stream.</param>
            <param name="headerEncoding">Header reading encoding. If not sure UTF-8 is recommended.</param>
            <param name="defaultContentType">Default content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>,<b>headerEncoding</b> or <b>defaultContentType</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Entity.SetParent(com.verion.uniapi.MIME.MIME_Entity)">
            <summary>
            Sets MIME entity parent entity.
            </summary>
            <param name="parent">Parent entity.</param>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_Entity.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_Entity.IsModified">
            <summary>
            Gets if this entity is modified since it has loaded.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_Entity.Parent">
            <summary>
            Gets the parent entity of this entity, returns null if this is the root entity.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_Entity.Header">
            <summary>
            Gets MIME entity header field collection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_Entity.MimeVersion">
            <summary>
            Gets or sets MIME version number. Value null means that header field does not exist. Normally this value is 1.0. Defined in RFC 2045 section 4.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>An indicator that this message is formatted according to the MIME
            standard, and an indication of which version of MIME is used.</remarks>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_Entity.ContentID">
            <summary>
            Gets or sets content body part ID. Value null means that header field does not exist. Defined in RFC 2045 7.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Specifies a Unique ID for one MIME body part of the content of a message.</remarks>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_Entity.ContentDescription">
            <summary>
            Gets or sets description of message body part. Value null means that header field does not exist. Defined in RFC 2045 8.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Description of a particular body part of a message; for example, a caption for an image body part.</remarks>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_Entity.ContentTransferEncoding">
            <summary>
            Gets or sets content transfer encoding. Value null means that header field does not exist. 
            RFC defined values are in <see cref="T:com.verion.uniapi.MIME.MIME_TransferEncodings">MIME_TransferEncodings</see>. Defined in RFC 2045 6.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Coding method used in a MIME message body part.</remarks>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_Entity.ContentType">
            <summary>
            Gets or sets MIME content type. Value null means that header field does not exist. Defined in RFC 2045 5.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_Entity.ContentBase">
            <summary>
            Gets or sets base to be used for resolving relative URIs within this content part. Value null means that header field does not exist.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Base to be used for resolving relative URIs within this content part. See also Content-Location.</remarks>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_Entity.ContentLocation">
            <summary>
            Gets or sets URI for retrieving a body part. Value null means that header field does not exist.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>URI using which the content of this body-part part was retrieved,
            might be retrievable, or which otherwise gives a globally unique identification of the content.</remarks>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_Entity.Contentfeatures">
            <summary>
            Gets or sets content features of a MIME body part. Value null means that header field does not exist.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>The 'Content-features:' header can be used to annotate a MIME body part with a media feature expression, 
            to indicate features of the body part content. See also RFC 2533, RFC 2506, and RFC 2045.</remarks>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_Entity.ContentDisposition">
            <summary>
            Gets or sets content disposition. Value null means that header field does not exist.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Indicates whether a MIME body part is to be shown inline or is an attachment; can also indicate a 
            suggested filename for use when saving an attachment to a file.</remarks>
            <exception cref="T:com.verion.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_Entity.ContentLanguage">
            <summary>
            Gets or sets language of message content. Value null means that header field does not exist.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Can include a code for the natural language used in a message; e.g., 'en' for English. 
            Can also contain a list of languages for a message containing more than one language.</remarks>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_Entity.ContentAlternative">
            <summary>
            Gets or sets message alternative content. Value null means that header field does not exist.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Information about the media features of alternative content formats available for the current message.</remarks>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_Entity.ContentMD5">
            <summary>
            Gets or sets content MD5 checksum. Value null means that header field does not exist.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Checksum of content to ensure that it has not been modified.</remarks>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_Entity.ContentDuration">
            <summary>
            Gets or sets time duration of content. Value null means that header field does not exist.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Time duration of body part content, in seconds (e.g., for audio message).</remarks>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_Entity.Body">
            <summary>
            Gets or sets MIME entity body.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null reference passed.</exception>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_EntityCollection">
            <summary>
            Represents MIME child entity collection in multipart/xxx entity.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_EntityCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_EntityCollection.Add(com.verion.uniapi.MIME.MIME_Entity)">
            <summary>
            Adds specified MIME enity to the collection.
            </summary>
            <param name="entity">MIME entity.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>entity</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_EntityCollection.Insert(System.Int32,com.verion.uniapi.MIME.MIME_Entity)">
            <summary>
            Inserts a new MIME entity into the collection at the specified location.
            </summary>
            <param name="index">The location in the collection where you want to add the MIME entity.</param>
            <param name="entity">MIME entity.</param>
            <exception cref="T:System.IndexOutOfRangeException">Is raised when <b>index</b> is out of range.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>entity</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_EntityCollection.Remove(com.verion.uniapi.MIME.MIME_Entity)">
            <summary>
            Removes specified MIME entity from the collection.
            </summary>
            <param name="entity">MIME entity.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>field</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_EntityCollection.Remove(System.Int32)">
            <summary>
            Removes MIME entity at the specified index from the collection.
            </summary>
            <param name="index">The index of the MIME entity to remove.</param>
            <exception cref="T:System.IndexOutOfRangeException">Is raised when <b>index</b> is out of range.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_EntityCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_EntityCollection.Contains(com.verion.uniapi.MIME.MIME_Entity)">
            <summary>
            Gets if the collection contains specified MIME entity.
            </summary>
            <param name="entity">MIME entity.</param>
            <returns>Returns true if the specified MIME entity exists in the collection, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>entity</b> is null.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_EntityCollection.SetModified(System.Boolean)">
            <summary>
            Sets IsModified property value.
            </summary>
            <param name="isModified">Modified flag.</param>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_EntityCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns>Returns IEnumerator interface.</returns>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_EntityCollection.IsModified">
            <summary>
            Gets if enity collection has modified.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_EntityCollection.Count">
            <summary>
            Gets number of items in the collection.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_EntityCollection.Item(System.Int32)">
            <summary>
            Gets MIME entity at the specified index.
            </summary>
            <param name="index">MIME entity zero-based index.</param>
            <returns>Returns MIME entity.</returns>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_Entity_KEP">
            <summary>
            Represents a MIME entity. Defined in RFC 2045 2.4.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Entity_KEP.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Entity_KEP.Dispose">
            <summary>
            Cleans up any resources being used. This method is thread-safe.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Entity_KEP.ToFile(System.String,com.verion.uniapi.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Stores MIME entity to the specified file.
            </summary>
            <param name="file">File name with path where to store MIME entity.</param>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>file</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Entity_KEP.ToFile(System.String,com.verion.uniapi.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Stores MIME entity to the specified file.
            </summary>
            <param name="file">File name with path where to store MIME entity.</param>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <param name="headerReencode">If true always specified encoding is used for header. If false and header field value not modified, 
            original encoding is kept.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>file</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Entity_KEP.ToStream(System.IO.Stream,com.verion.uniapi.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Store MIME enity to the specified stream.
            </summary>
            <param name="stream">Stream where to store MIME entity. Storing starts form stream current position.</param>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Entity_KEP.ToStream(System.IO.Stream,com.verion.uniapi.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Store MIME enity to the specified stream.
            </summary>
            <param name="stream">Stream where to store MIME entity. Storing starts form stream current position.</param>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <param name="headerReencode">If true always specified encoding is used for header. If false and header field value not modified, 
            original encoding is kept.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Entity_KEP.ToString">
            <summary>
            Returns MIME entity as string.
            </summary>
            <returns>Returns MIME entity as string.</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Entity_KEP.ToString(com.verion.uniapi.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Returns MIME entity as string.
            </summary>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <returns>Returns MIME entity as string.</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Entity_KEP.ToString(com.verion.uniapi.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Returns MIME entity as string.
            </summary>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <param name="headerReencode">If true always specified encoding is used for header. If false and header field value not modified, 
            original encoding is kept.</param>
            <returns>Returns MIME entity as string.</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Entity_KEP.ToByte(com.verion.uniapi.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Returns MIME entity as byte[].
            </summary>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <returns>Returns MIME entity as byte[].</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Entity_KEP.ToByte(com.verion.uniapi.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Returns MIME entity as byte[].
            </summary>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <param name="headerReencode">If true always specified encoding is used for header. If false and header field value not modified, 
            original encoding is kept.</param>
            <returns>Returns MIME entity as byte[].</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Entity_KEP.Parse(com.verion.utils.IO.SmartStream,System.Text.Encoding,com.verion.uniapi.MIME.MIME_h_ContentType)">
            <summary>
            Parses MIME entiry from the specified stream.
            </summary>
            <param name="stream">Source stream.</param>
            <param name="headerEncoding">Header reading encoding. If not sure UTF-8 is recommended.</param>
            <param name="defaultContentType">Default content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>,<b>headerEncoding</b> or <b>defaultContentType</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Entity_KEP.SetParent(com.verion.uniapi.MIME.MIME_Entity_KEP)">
            <summary>
            Sets MIME entity parent entity.
            </summary>
            <param name="parent">Parent entity.</param>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_Entity_KEP.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_Entity_KEP.IsModified">
            <summary>
            Gets if this entity is modified since it has loaded.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_Entity_KEP.Parent">
            <summary>
            Gets the parent entity of this entity, returns null if this is the root entity.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_Entity_KEP.Header">
            <summary>
            Gets MIME entity header field collection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_Entity_KEP.MimeVersion">
            <summary>
            Gets or sets MIME version number. Value null means that header field does not exist. Normally this value is 1.0. Defined in RFC 2045 section 4.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>An indicator that this message is formatted according to the MIME
            standard, and an indication of which version of MIME is used.</remarks>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_Entity_KEP.ContentID">
            <summary>
            Gets or sets content body part ID. Value null means that header field does not exist. Defined in RFC 2045 7.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Specifies a Unique ID for one MIME body part of the content of a message.</remarks>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_Entity_KEP.ContentDescription">
            <summary>
            Gets or sets description of message body part. Value null means that header field does not exist. Defined in RFC 2045 8.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Description of a particular body part of a message; for example, a caption for an image body part.</remarks>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_Entity_KEP.ContentTransferEncoding">
            <summary>
            Gets or sets content transfer encoding. Value null means that header field does not exist. 
            RFC defined values are in <see cref="T:com.verion.uniapi.MIME.MIME_TransferEncodings">MIME_TransferEncodings</see>. Defined in RFC 2045 6.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Coding method used in a MIME message body part.</remarks>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_Entity_KEP.ContentType">
            <summary>
            Gets or sets MIME content type. Value null means that header field does not exist. Defined in RFC 2045 5.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_Entity_KEP.ContentBase">
            <summary>
            Gets or sets base to be used for resolving relative URIs within this content part. Value null means that header field does not exist.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Base to be used for resolving relative URIs within this content part. See also Content-Location.</remarks>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_Entity_KEP.ContentLocation">
            <summary>
            Gets or sets URI for retrieving a body part. Value null means that header field does not exist.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>URI using which the content of this body-part part was retrieved,
            might be retrievable, or which otherwise gives a globally unique identification of the content.</remarks>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_Entity_KEP.Contentfeatures">
            <summary>
            Gets or sets content features of a MIME body part. Value null means that header field does not exist.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>The 'Content-features:' header can be used to annotate a MIME body part with a media feature expression, 
            to indicate features of the body part content. See also RFC 2533, RFC 2506, and RFC 2045.</remarks>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_Entity_KEP.ContentDisposition">
            <summary>
            Gets or sets content disposition. Value null means that header field does not exist.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Indicates whether a MIME body part is to be shown inline or is an attachment; can also indicate a 
            suggested filename for use when saving an attachment to a file.</remarks>
            <exception cref="T:com.verion.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_Entity_KEP.ContentLanguage">
            <summary>
            Gets or sets language of message content. Value null means that header field does not exist.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Can include a code for the natural language used in a message; e.g., 'en' for English. 
            Can also contain a list of languages for a message containing more than one language.</remarks>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_Entity_KEP.ContentAlternative">
            <summary>
            Gets or sets message alternative content. Value null means that header field does not exist.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Information about the media features of alternative content formats available for the current message.</remarks>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_Entity_KEP.ContentMD5">
            <summary>
            Gets or sets content MD5 checksum. Value null means that header field does not exist.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Checksum of content to ensure that it has not been modified.</remarks>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_Entity_KEP.ContentDuration">
            <summary>
            Gets or sets time duration of content. Value null means that header field does not exist.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Time duration of body part content, in seconds (e.g., for audio message).</remarks>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_Entity_KEP.Body">
            <summary>
            Gets or sets MIME entity body.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null reference passed.</exception>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_h">
            <summary>
            This is base class for MIME header fields. Defined in RFC 2045 3.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h.ToString">
            <summary>
            Returns header field as string.
            </summary>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h.ToString(com.verion.uniapi.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.
            If encoding needed, UTF-8 is strongly reccomended if not sure.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h.ToString(com.verion.uniapi.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded. 
            If encoding needed, UTF-8 is strongly reccomended if not sure.</param>
            <param name="reEncode">If true always specified encoding is used. If false and header field value not modified, original encoding is kept.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h.ValueToString">
            <summary>
            Returns header field value as string.
            </summary>
            <returns>Returns header field value as string.</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h.ValueToString(com.verion.uniapi.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Returns header field value as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.
            If encoding needed, UTF-8 is strongly reccomended if not sure.</param>
            <returns>Returns header field value as string.</returns>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_h.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_h.Name">
            <summary>
            Gets header field name. For example "Content-Type".
            </summary>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_h_Collection">
            <summary>
            This class represents MIME header fields collection. Defined in RFC 2045.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_Collection.#ctor(com.verion.uniapi.MIME.MIME_h_Provider)">
            <summary>
            Default constructor.
            </summary>
            <param name="provider">Header fields provider.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>provider</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_Collection.Insert(System.Int32,com.verion.uniapi.MIME.MIME_h)">
            <summary>
            Inserts a new header field into the collection at the specified location.
            </summary>
            <param name="index">The location in the collection where you want to add the item.</param>
            <param name="field">Header field to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when <b>index</b> is out of range.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>field</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_Collection.Add(System.String)">
            <summary>
            Parses and adds specified header field to the end of the collection.
            </summary>
            <param name="field">Header field string (Name: value).</param>
            <returns>Retunrs added header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>field</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_Collection.Add(com.verion.uniapi.MIME.MIME_h)">
            <summary>
            Adds specified header field to the end of the collection.
            </summary>
            <param name="field">Header field to add.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>field</b> is null reference value.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_Collection.Remove(com.verion.uniapi.MIME.MIME_h)">
            <summary>
            Removes specified header field from the collection.
            </summary>
            <param name="field">Header field to remove.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>field</b> is null reference value.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_Collection.RemoveAll(System.String)">
            <summary>
            Removes all header fields with the specified name.
            </summary>
            <param name="name">Header field name.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>name</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_Collection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_Collection.Contains(System.String)">
            <summary>
            Gets if collection has item with the specified name.
            </summary>
            <param name="name">Header field name.</param>
            <returns>Returns true if specified item exists in the collection, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>name</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_Collection.Contains(com.verion.uniapi.MIME.MIME_h)">
            <summary>
            Gets if collection contains the specified item.
            </summary>
            <param name="field">Header field.</param>
            <returns>Returns true if specified item exists in the collection, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>field</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_Collection.GetFirst(System.String)">
            <summary>
            Gets first header field with the specified name. returns null if specified header field doesn't exist.
            </summary>
            <param name="name">Header field name.</param>
            <returns>Returns first header field with the specified name. returns null if specified header field doesn't exist.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>name</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_Collection.ReplaceFirst(com.verion.uniapi.MIME.MIME_h)">
            <summary>
            Replaces first header field with specified name with specified value.
            </summary>
            <param name="field">Hedaer field.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>field</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_Collection.ToArray">
            <summary>
            Copies header fields to new array.
            </summary>
            <returns>Returns header fields array.</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_Collection.ToFile(System.String,com.verion.uniapi.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Stores header to the specified file.
            </summary>
            <param name="fileName">File name with optional path.</param>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>fileName</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_Collection.ToByte(com.verion.uniapi.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Returns header as byte[] data.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <returns>Returns header as byte[] data.</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_Collection.ToStream(System.IO.Stream,com.verion.uniapi.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Stores header to the specified stream.
            </summary>
            <param name="stream">Stream where to store header.</param>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_Collection.ToStream(System.IO.Stream,com.verion.uniapi.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Stores header to the specified stream.
            </summary>
            <param name="stream">Stream where to store header.</param>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <param name="reEncod">If true always specified encoding is used for header. If false and header field value not modified, 
            original encoding is kept.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_Collection.ToString">
            <summary>
            Returns MIME header as string.
            </summary>
            <returns>Returns MIME header as string.</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_Collection.ToString(com.verion.uniapi.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Returns MIME header as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <returns>Returns MIME header as string.</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_Collection.ToString(com.verion.uniapi.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Returns MIME header as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <param name="reEncode">If true always specified encoding is used. If false and header fields which value not modified, original encoding is kept.</param>
            <returns>Returns MIME header as string.</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_Collection.Parse(System.String)">
            <summary>
            Parses MIME header from the specified value.
            </summary>
            <param name="value">MIME header string.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_Collection.Parse(com.verion.utils.IO.SmartStream)">
            <summary>
            Parses MIME header from the specified stream.
            </summary>
            <param name="stream">MIME header stream.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_Collection.Parse(com.verion.utils.IO.SmartStream,System.Text.Encoding)">
            <summary>
            Parses MIME header from the specified stream.
            </summary>
            <param name="stream">MIME header stream.</param>
            <param name="encoding">Headers fields reading encoding. If not sure, UTF-8 is recommended.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> or <b>encoding</b> is null.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_Collection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_h_Collection.IsModified">
            <summary>
            Gets if header has modified since it was loaded.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_h_Collection.Count">
            <summary>
            Gets number of items in the collection.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_h_Collection.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <returns>Returns the element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when <b>index</b> is out of range.</exception>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_h_Collection.Item(System.String)">
            <summary>
            Gets header fields with the specified name.
            </summary>
            <param name="name">Header field name.</param>
            <returns>Returns header fields with the specified name.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>name</b> is null reference.</exception>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_h_Collection.FieldsProvider">
            <summary>
            Gets header fields provider.
            </summary>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_h_ContentDisposition">
             <summary>
             Represents "Content-Disposition:" header. Defined in RFC 2183.
             </summary>
             <example>
             <code>
             RFC 2183.
                 In the extended BNF notation of [RFC 822], the Content-Disposition
                 header field is defined as follows:
            
                 disposition := "Content-Disposition" ":" disposition-type *(";" disposition-parm)
            
                 disposition-type := "inline" / "attachment" / extension-token
                                     ; values are not case-sensitive
            
                 disposition-parm := filename-parm 
                                     / creation-date-parm
                                     / modification-date-parm
                                     / read-date-parm
                                     / size-parm
                                     / parameter
            
                 filename-parm := "filename" "=" value
            
                 creation-date-parm := "creation-date" "=" quoted-date-time
             
                 modification-date-parm := "modification-date" "=" quoted-date-time
            
                 read-date-parm := "read-date" "=" quoted-date-time
            
                 size-parm := "size" "=" 1*DIGIT
            
                 quoted-date-time := quoted-string
                                     ; contents MUST be an RFC 822 `date-time'
                                     ; numeric timezones (+HHMM or -HHMM) MUST be used
             </code>
             </example>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_ContentDisposition.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="dispositionType">The disposition-type. Known values are in <see cref="T:com.verion.uniapi.MIME.MIME_DispositionTypes">MIME_DispositionTypes</see>.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>dispositionType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_ContentDisposition.#ctor">
            <summary>
            Internal parser constructor.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_ContentDisposition.Parse(System.String)">
            <summary>
            Parses header field from the specified value.
            </summary>
            <param name="value">Header field value. Header field name must be included. For example: 'Content-Type: text/plain'.</param>
            <returns>Returns parsed header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_ContentDisposition.ToString(com.verion.uniapi.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <param name="reEncode">If true always specified encoding is used. If false and header field value not modified, original encoding is kept.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_h_ContentDisposition.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_h_ContentDisposition.Name">
            <summary>
            Returns always "Content-Disposition".
            </summary>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_h_ContentDisposition.DispositionType">
            <summary>
            Gets the disposition-type. Known values are in <see cref="T:com.verion.uniapi.MIME.MIME_DispositionTypes">MIME_DispositionTypes</see>.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_h_ContentDisposition.Parameters">
            <summary>
            Gets Content-Type parameters collection.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_h_ContentDisposition.Param_FileName">
            <summary>
            Gets or sets the suggested file name. Value null means not specified. Defined in RFC 2183 2.3.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_h_ContentDisposition.Param_CreationDate">
            <summary>
            Gets or sets the creation date for a file. Value DateTime.MinValue means not specified. Defined in RFC 2183 2.4.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_h_ContentDisposition.Param_ModificationDate">
            <summary>
            Gets or sets the modification date of a file. Value DateTime.MinValue means not specified. Defined in RFC 2183 2.5.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_h_ContentDisposition.Param_ReadDate">
            <summary>
            Gets or sets the last read date of a file. Value DateTime.MinValue means not specified. Defined in RFC 2183 2.6.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_h_ContentDisposition.Param_Size">
            <summary>
            Gets or sets the size of a file. Value -1 means not specified. Defined in RFC 2183 2.7.
            </summary>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_h_ContentType">
             <summary>
             Represents "Content-Type:" header. Defined in RFC 2045 5.1.
             </summary>
             <remarks>
             <code>
             RFC 2045 5.1.
             In the Augmented BNF notation of RFC 822, a Content-Type header field
             value is defined as follows:
            
                 content := "Content-Type" ":" type "/" subtype
                            *(";" parameter)
                            ; Matching of media type and subtype
                            ; is ALWAYS case-insensitive.
            
                 type := discrete-type / composite-type
            
                 discrete-type := "text" / "image" / "audio" / "video" / "application" / extension-token
            
                 composite-type := "message" / "multipart" / extension-token
            
                 extension-token := ietf-token / x-token
            
                 ietf-token := (An extension token defined by a standards-track RFC and registered with IANA.)
            
                 x-token := (The two characters "X-" or "x-" followed, with no intervening white space, by any token)
            
                 subtype := extension-token / iana-token
            
                 iana-token := (A publicly-defined extension token. Tokens of this form must be registered with IANA as specified in RFC 2048.)
            
                 parameter := attribute "=" value
            
                 attribute := token
                              ; Matching of attributes
                              ; is ALWAYS case-insensitive.
            
                 value := token / quoted-string
            
                 token := 1*(any (US-ASCII) CHAR except SPACE, CTLs,or tspecials)
            
                 tspecials :=  "(" / ")" / "&lt;" / "&gt;" / "@" /
                               "," / ";" / ":" / "\" / "
                               "/" / "[" / "]" / "?" / "="
                               ; Must be in quoted-string,
                               ; to use within parameter values
             </code>
             </remarks>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_ContentType.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="mediaType">Media type with subtype. For example <b>text/plain</b>.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>mediaType</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_ContentType.#ctor">
            <summary>
            Internal parser constructor.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_ContentType.Parse(System.String)">
            <summary>
            Parses header field from the specified value.
            </summary>
            <param name="value">Header field value. Header field name must be included. For example: 'Content-Type: text/plain'.</param>
            <returns>Returns parsed header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_ContentType.ToString(com.verion.uniapi.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <param name="reEncode">If true always specified encoding is used. If false and header field value not modified, original encoding is kept.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_h_ContentType.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_h_ContentType.Name">
            <summary>
            Returns always "Content-Type".
            </summary>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_h_ContentType.Type">
            <summary>
            Gets media type. For example: application,image,text, ... .
            </summary>
            <remarks>The official list of reggistered types are http://www.iana.org/assignments/media-types .</remarks>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_h_ContentType.SubType">
            <summary>
            Gets media sub-type. For example for text/plain, sub-type is 'plain'.
            </summary>
            <remarks>The official list of reggistered types are http://www.iana.org/assignments/media-types .</remarks>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_h_ContentType.TypeWithSubype">
            <summary>
            Gets media type with subtype as Type/SubType. Well known value are in <see cref="T:com.verion.uniapi.MIME.MIME_MediaTypes">MIME_MediaTypes</see>. For example: text/plain.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_h_ContentType.TypeWithSubtype">
            <summary>
            Gets media type with subtype as Type/SubType. Well known value are in <see cref="T:com.verion.uniapi.MIME.MIME_MediaTypes">MIME_MediaTypes</see>. For example: text/plain.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_h_ContentType.Parameters">
            <summary>
            Gets Content-Type parameters collection.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_h_ContentType.Param_Name">
            <summary>
            Gets or sets Content-Type <b>name</b> parameter value. Value null means not specified.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_h_ContentType.Param_Charset">
            <summary>
            Gets or sets Content-Type <b>charset</b> parameter value. Value null means not specified.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_h_ContentType.Param_Boundary">
            <summary>
            Gets or sets Content-Type <b>boundary</b> parameter value. Value null means not specified.
            </summary>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_h_Parameter">
            <summary>
            Represents MIME header field parameter.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_Parameter.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">Parameter name.</param>
            <param name="value">Parameter value. Value null means not specified.</param>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_h_Parameter.IsModified">
            <summary>
            Gets if this header field parameter is modified since it has loaded.
            </summary>
            <remarks>All new added header fields parameters has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_h_Parameter.Name">
            <summary>
            Gets parameter name.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_h_Parameter.Value">
            <summary>
            Gets or sets parameter value. Value null means not specified.
            </summary>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_h_ParameterCollection">
            <summary>
            Represents MIME header field parameters collection.
            </summary>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_h_ParameterCollection._ParameterBuilder">
            <summary>
            This class represents header field parameter builder.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_ParameterCollection._ParameterBuilder.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">Parameter name.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>name</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_ParameterCollection._ParameterBuilder.AddPart(System.Int32,System.Boolean,System.String)">
            <summary>
            Adds header field parameter part to paramter buffer.
            </summary>
            <param name="index">Parameter part index.</param>
            <param name="encoded">If true parameter part is encoded.</param>
            <param name="value">Parameter part value.</param>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_ParameterCollection._ParameterBuilder.GetParamter">
            <summary>
            Gets header field parameter(splitted paramter values concated).
            </summary>
            <returns>Returns header field parameter.</returns>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_h_ParameterCollection._ParameterBuilder.Name">
            <summary>
            Gets parameter name.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_ParameterCollection.#ctor(com.verion.uniapi.MIME.MIME_h)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner MIME header field.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_ParameterCollection.Remove(System.String)">
            <summary>
            Removes specified parametr from the collection.
            </summary>
            <param name="name">Parameter name.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>name</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_ParameterCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_ParameterCollection.ToArray">
            <summary>
            Copies header fields parameters to new array.
            </summary>
            <returns>Returns header fields parameters array.</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_ParameterCollection.ToString">
            <summary>
            Returns header field parameters as string.
            </summary>
            <returns>Returns header field parameters as string.</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_ParameterCollection.ToString(System.Text.Encoding)">
            <summary>
            Returns header field parameters as string.
            </summary>
            <param name="charset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <returns>Returns header field parameters as string.</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_ParameterCollection.Parse(System.String)">
            <summary>
            Parses parameters from the specified value.
            </summary>
            <param name="value">Header field parameters string.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_ParameterCollection.Parse(com.verion.uniapi.MIME.MIME_Reader)">
            <summary>
            Parses parameters from the specified reader.
            </summary>
            <param name="reader">MIME reader.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>reader</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_ParameterCollection.DecodeExtOctet(System.String,System.Text.Encoding)">
            <summary>
            Decodes non-ascii text with MIME <b>ext-octet</b> method. Defined in RFC 2231 7.
            </summary>
            <param name="text">Text to decode,</param>
            <param name="charset">Charset to use.</param>
            <returns>Returns decoded text.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>text</b> or <b>charset</b> is null.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_ParameterCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_h_ParameterCollection.IsModified">
            <summary>
            Gets if this header field parameters are modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_h_ParameterCollection.Owner">
            <summary>
            Gets owner MIME header field.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_h_ParameterCollection.Count">
            <summary>
            Gets number of items in the collection.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_h_ParameterCollection.Item(System.String)">
            <summary>
            Gets or sets specified header field parameter value. Value null means not specified.
            </summary>
            <param name="name">Header field name.</param>
            <returns>Returns specified header field value or null if specified parameter doesn't exist.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>name</b> is null reference.</exception>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_h_Provider">
            <summary>
            This class represents MIME headers provider.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_Provider.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_Provider.Parse(System.String)">
            <summary>
            Parses specified header field.
            </summary>
            <param name="field">Header field string (Name: value).</param>
            <returns>Returns parsed header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>field</b> is null reference.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_h_Provider.DefaultHeaderField">
            <summary>
            Gets or sets default header field what is used to reperesent unknown header fields.
            </summary>
            <remarks>This property value value must be based on <see cref="T:com.verion.uniapi.MIME.MIME_h"/> class.</remarks>
            <exception cref="T:System.ArgumentNullException">Is raised when null reference passed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is passed.</exception>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_h_Provider.HeaderFields">
            <summary>
            Gets header fields parsers collection.
            </summary>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_h_Unparsed">
            <summary>
            This class represent header field what parsing has failed.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_Unparsed.#ctor(System.String,System.Exception)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">Header field value. Header field name must be included. For example: 'Content-Type: text/plain'.</param>
            <param name="exception">Parsing error.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_Unparsed.Parse(System.String)">
            <summary>
            Parses header field from the specified value.
            </summary>
            <param name="value">Header field value. Header field name must be included. For example: 'Content-Type: text/plain'.</param>
            <returns>Returns parsed header field.</returns>
            <exception cref="T:System.InvalidOperationException">Is alwyas raised when this mewthod is accsessed.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_Unparsed.ToString(com.verion.uniapi.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <param name="reEncode">If true always specified encoding is used. If false and header field value not modified, original encoding is kept.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_h_Unparsed.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_h_Unparsed.Name">
            <summary>
            Gets header field name.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_h_Unparsed.Value">
            <summary>
            Gets header field value.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_h_Unparsed.Exception">
            <summary>
            Gets error happened during parse.
            </summary>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_h_Unstructured">
            <summary>
            This class represents normal unstructured text header field.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_Unstructured.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">Header field name.</param>
            <param name="value">Header field value.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>name</b> or <b>value</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_Unstructured.#ctor">
            <summary>
            Internal parser constructor.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_Unstructured.Parse(System.String)">
            <summary>
            Parses header field from the specified value.
            </summary>
            <param name="value">Header field value. Header field name must be included. For example: 'Content-Type: text/plain'.</param>
            <returns>Returns parsed header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:com.verion.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_h_Unstructured.ToString(com.verion.uniapi.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <param name="reEncode">If true always specified encoding is used. If false and header field value not modified, original encoding is kept.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_h_Unstructured.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_h_Unstructured.Name">
            <summary>
            Gets header field name.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_h_Unstructured.Value">
            <summary>
            Gets or sets header field value.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when when null reference is passed.</exception>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_b_KEPbasepart">
            <summary>
            This class is base class for singlepart media bodies like: text,video,audio,image.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_KEPbasepart.#ctor(com.verion.uniapi.MIME.MIME_h_ContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_KEPbasepart.Finalize">
            <summary>
            Destructor - Just incase user won't call dispose.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_KEPbasepart.SetParent(com.verion.uniapi.MIME.MIME_Entity_KEP,System.Boolean)">
            <summary>
            Sets body parent.
            </summary>
            <param name="entity">Owner entity.</param>
            <param name="setContentType">If true sets entity.ContentType header value.</param>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_KEPbasepart.ToStream(System.IO.Stream,com.verion.uniapi.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding,System.Boolean)">
            <summary>
            Stores MIME entity body to the specified stream.
            </summary>
            <param name="stream">Stream where to store body data.</param>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <param name="headerReencode">If true always specified encoding is used for header. If false and header field value not modified, 
            original encoding is kept.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_KEPbasepart.SetModified(System.Boolean)">
            <summary>
            Sets IsModified property value.
            </summary>
            <param name="isModified">Modified flag.</param>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_KEPbasepart.GetEncodedDataStream">
            <summary>
            Gets body encoded data stream.
            </summary>
            <returns>Returns body encoded data stream.</returns>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is accessed and this body is not bounded to any entity.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_KEPbasepart.SetEncodedData(System.String,System.IO.Stream)">
            <summary>
            Sets body encoded data from specified stream.
            </summary>
            <param name="contentTransferEncoding">Content-Transfer-Encoding in what encoding <b>stream</b> data is.</param>
            <param name="stream">Stream data to add.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentTransferEncoding</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the argumennts has invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is accessed and this body is not bounded to any entity.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_KEPbasepart.GetDataStream">
            <summary>
            Gets body decoded data stream.
            </summary>
            <returns>Returns body decoded data stream.</returns>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is accessed and this body is not bounded to any entity.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when body contains not supported Content-Transfer-Encoding.</exception>
            <remarks>The returned stream should be closed/disposed as soon as it's not needed any more.</remarks>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_KEPbasepart.SetData(System.IO.Stream,System.String)">
            <summary>
            Sets body data from the specified stream.
            </summary>
            <param name="stream">Source stream.</param>
            <param name="transferEncoding">Specifies content-transfer-encoding to use to encode data.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> or <b>transferEncoding</b> is null reference.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is accessed and this body is not bounded to any entity.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_b_KEPbasepart.SetDataFromFile(System.String,System.String)">
            <summary>
            Sets body data from the specified file.
            </summary>
            <param name="file">File name with optional path.</param>
            <param name="transferEncoding">Specifies content-transfer-encoding to use to encode data.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>file</b> is null reference.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is accessed and this body is not bounded to any entity.</exception>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_b_KEPbasepart.IsModified">
            <summary>
            Gets if body has modified.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_b_KEPbasepart.EncodedDataSize">
            <summary>
            Gets encoded body data size in bytes.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_b_KEPbasepart.EncodedData">
            <summary>
            Gets body encoded data. 
            </summary>
            <remarks>NOTE: Use this property with care, because body data may be very big and you may run out of memory.
            For bigger data use <see cref="M:com.verion.uniapi.MIME.MIME_b_KEPbasepart.GetEncodedDataStream"/> method instead.</remarks>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_b_KEPbasepart.Data">
            <summary>
            Gets body decoded data.
            </summary>
            <remarks>NOTE: Use this property with care, because body data may be very big and you may run out of memory.
            For bigger data use <see cref="M:com.verion.uniapi.MIME.MIME_b_KEPbasepart.GetDataStream"/> method instead.</remarks>
            <exception cref="T:System.NotSupportedException">Is raised when body contains not supported Content-Transfer-Encoding.</exception>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_b_KEPbasepart.EncodedStream">
            <summary>
            Gets encoded data stream.
            </summary>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_MediaTypes">
            <summary>
            This class holds well known Content-Type header field media types. For example: text/plain, application/octet-stream.
            Full IANA registered list can be found from: http://www.iana.org/assignments/media-types.
            </summary>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_MediaTypes.Application">
            <summary>
            This class holds well-known application/xxx media types.
            </summary>
        </member>
        <member name="F:com.verion.uniapi.MIME.MIME_MediaTypes.Application.octet_stream">
            <summary>
            "application/octet-stream". Defined in RFC 2045,2046.
            </summary>
        </member>
        <member name="F:com.verion.uniapi.MIME.MIME_MediaTypes.Application.pdf">
            <summary>
            "application/pdf". Defined in RFC 3778.
            </summary>
        </member>
        <member name="F:com.verion.uniapi.MIME.MIME_MediaTypes.Application.sdp">
            <summary>
            "application/sdp". Defined in RFC 4566.
            </summary>
        </member>
        <member name="F:com.verion.uniapi.MIME.MIME_MediaTypes.Application.xml">
            <summary>
            "application/xml". Defined RFC 3023.
            </summary>
        </member>
        <member name="F:com.verion.uniapi.MIME.MIME_MediaTypes.Application.zip">
            <summary>
            "application/zip". Defined in RFC 4566.
            </summary>
        </member>
        <member name="F:com.verion.uniapi.MIME.MIME_MediaTypes.Application.x_pkcs7_signature">
            <summary>
            "application/x-pkcs7-signature". Defined in RFC 2311,2633.
            </summary>
        </member>
        <member name="F:com.verion.uniapi.MIME.MIME_MediaTypes.Application.pkcs7_mime">
            <summary>
            "application/pkcs7-mime". Defined in RFC 5751.
            </summary>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_MediaTypes.Image">
            <summary>
            This class holds well-known image/xxx media types.
            </summary>
        </member>
        <member name="F:com.verion.uniapi.MIME.MIME_MediaTypes.Image.gif">
            <summary>
            "image/gif".
            </summary>
        </member>
        <member name="F:com.verion.uniapi.MIME.MIME_MediaTypes.Image.jpeg">
            <summary>
            "image/jpeg".
            </summary>
        </member>
        <member name="F:com.verion.uniapi.MIME.MIME_MediaTypes.Image.tiff">
            <summary>
            "image/tiff".
            </summary>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_MediaTypes.Text">
            <summary>
            This class holds well-known text/xxx media types.
            </summary>
        </member>
        <member name="F:com.verion.uniapi.MIME.MIME_MediaTypes.Text.calendar">
            <summary>
            "text/calendar". Defined in RFC 2445.
            </summary>
        </member>
        <member name="F:com.verion.uniapi.MIME.MIME_MediaTypes.Text.css">
            <summary>
            "text/css". Defined in RFC 2854
            </summary>
        </member>
        <member name="F:com.verion.uniapi.MIME.MIME_MediaTypes.Text.html">
            <summary>
            "text/html". Defined in RFC 2854.
            </summary>
        </member>
        <member name="F:com.verion.uniapi.MIME.MIME_MediaTypes.Text.plain">
            <summary>
            "text/plain". Defined in RFC 2646,2046.
            </summary>
        </member>
        <member name="F:com.verion.uniapi.MIME.MIME_MediaTypes.Text.rfc822_headers">
            <summary>
            "text/rfc822-headers". Defined in RFC 1892.
            </summary>
        </member>
        <member name="F:com.verion.uniapi.MIME.MIME_MediaTypes.Text.richtext">
            <summary>
            "text/richtext". Defined in RFC 2045,2046.
            </summary>
        </member>
        <member name="F:com.verion.uniapi.MIME.MIME_MediaTypes.Text.xml">
            <summary>
            "text/xml". Defined in RFC 3023.
            </summary>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_MediaTypes.Multipart">
            <summary>
            This class holds well-known multipart/xxx media types.
            </summary>
        </member>
        <member name="F:com.verion.uniapi.MIME.MIME_MediaTypes.Multipart.alternative">
            <summary>
            "multipart/alternative". Defined in RFC 2045,2046.
            </summary>
        </member>
        <member name="F:com.verion.uniapi.MIME.MIME_MediaTypes.Multipart.digest">
            <summary>
            "multipart/digest". Defined in RFC 2045,2046.
            </summary>
        </member>
        <member name="F:com.verion.uniapi.MIME.MIME_MediaTypes.Multipart.encrypted">
            <summary>
            "multipart/digest". Defined in RFC 1847.
            </summary>
        </member>
        <member name="F:com.verion.uniapi.MIME.MIME_MediaTypes.Multipart.form_data">
            <summary>
            "multipart/form-data". Defined in RFC 2388.
            </summary>
        </member>
        <member name="F:com.verion.uniapi.MIME.MIME_MediaTypes.Multipart.mixed">
            <summary>
            "multipart/mixed". Defined in RFC 2045,2046.
            </summary>
        </member>
        <member name="F:com.verion.uniapi.MIME.MIME_MediaTypes.Multipart.parallel">
            <summary>
            "multipart/parallel". Defined in RFC 2045,2046.
            </summary>
        </member>
        <member name="F:com.verion.uniapi.MIME.MIME_MediaTypes.Multipart.related">
            <summary>
            "multipart/related". Defined in RFC 2387.
            </summary>
        </member>
        <member name="F:com.verion.uniapi.MIME.MIME_MediaTypes.Multipart.report">
            <summary>
            "multipart/report". Defined in RFC 1892.
            </summary>
        </member>
        <member name="F:com.verion.uniapi.MIME.MIME_MediaTypes.Multipart.signed">
            <summary>
            "multipart/signed". Defined in RFC 1847.
            </summary>
        </member>
        <member name="F:com.verion.uniapi.MIME.MIME_MediaTypes.Multipart.voice_message">
            <summary>
            "multipart/voice-message". Defined in RFC 2421,2423.
            </summary>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_MediaTypes.Message">
            <summary>
            This class holds well-known message/xxx media types.
            </summary>
        </member>
        <member name="F:com.verion.uniapi.MIME.MIME_MediaTypes.Message.rfc822">
            <summary>
            "message/rfc822". 
            </summary>
        </member>
        <member name="F:com.verion.uniapi.MIME.MIME_MediaTypes.Message.disposition_notification">
            <summary>
            "message/disposition-notification". 
            </summary>
        </member>
        <member name="F:com.verion.uniapi.MIME.MIME_MediaTypes.Message.delivery_status">
            <summary>
            "message/delivery-status". Defined in RFC 3464.
            </summary>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_Message">
            <summary>
            Represents a MIME message. Defined in RFC 2045 2.3.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Message.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Message.ParseFromFile(System.String)">
            <summary>
            Parses MIME message from the specified file.
            </summary>
            <param name="file">File name with path from where to parse MIME message.</param>
            <returns>Returns parsed MIME message.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>file</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Message.ParseFromFile(System.String,System.Text.Encoding)">
            <summary>
            Parses MIME message from the specified file.
            </summary>
            <param name="file">File name with path from where to parse MIME message.</param>
            <param name="headerEncoding">Header reading encoding. If not sure UTF-8 is recommended.</param>
            <returns>Returns parsed MIME message.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>file</b> or <b>headerEncoding</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Message.ParseFromStream(System.IO.Stream)">
            <summary>
            Parses MIME message from the specified stream.
            </summary>
            <param name="stream">Stream from where to parse MIME message. Parsing starts from current stream position.</param>
            <returns>Returns parsed MIME message.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Message.ParseFromStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Parses MIME message from the specified stream.
            </summary>
            <param name="stream">Stream from where to parse MIME message. Parsing starts from current stream position.</param>
            <param name="headerEncoding">Header reading encoding. If not sure UTF-8 is recommended.</param>
            <returns>Returns parsed MIME message.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> or <b>headerEncoding</b> is null.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Message.CreateAttachment(System.String)">
            <summary>
            Creates attachment entity.
            </summary>
            <param name="file">File name with optional path.</param>
            <returns>Returns created attachment entity.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>file</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Message.CreateAttachment(System.IO.Stream,System.String)">
            <summary>
            Creates attachment entity.
            </summary>
            <param name="stream">Attachment data stream. Data is read from stream current position.</param>
            <param name="fileName">File name.</param>
            <returns>Returns created attachment entity.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> or <b>fileName</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Message.GetAllEntities(System.Boolean)">
            <summary>
            Gets all MIME entities as list.
            </summary>
            <param name="includeEmbbedMessage">If true, then embbed RFC822 message child entities are included.</param>
            <returns>Returns all MIME entities as list.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is disposed and this method is accessed.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Message.GetEntityByCID(System.String)">
            <summary>
            Gets MIME entity with the specified Content-ID. Returns null if no such entity.
            </summary>
            <param name="cid">Content ID.</param>
            <returns>Returns MIME entity with the specified Content-ID or null if no such entity.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>cid</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_Message.AllEntities">
            <summary>
            Gets all MIME entities as list.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is disposed and this property is accessed.</exception>
            <remarks>The nestetd entities of embbed messages with <b>Content-Type: Message/Rfc822</b> are also included.</remarks>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_Reader">
            <summary>
            MIME lexical tokens parser.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Reader.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">Value to read.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Reader.Atom">
            <summary>
            Reads RFC 2822 'atom' from source stream.
            </summary>
            <returns>Returns RFC 2822 'atom' or null if end of stream reached.</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Reader.DotAtom">
            <summary>
            Reads RFC 2822 'dot-atom' from source stream.
            </summary>
            <returns>Returns RFC 2822 'dot-atom' or null if end of stream reached.</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Reader.Token">
            <summary>
            Reads RFC 2045 (section 5) 'token' from source stream.
            </summary>
            <returns>Returns RFC 2045 (section 5) 'token' or null if end of stream reached.</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Reader.Comment">
            <summary>
            Reads RFC 822 'comment' from source stream.
            </summary>
            <returns>Returns RFC 822 'comment' or null if end of stream reached.</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Reader.Word">
            <summary>
            Reads RFC 2822 (section 3.2.6) 'word' from source stream.
            </summary>
            <returns>Returns RFC 2822 (section 3.2.6) 'word' or null if end of stream reached.</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Reader.EncodedWord">
            <summary>
            Reads RFC 2047 'encoded-word' from source stream.
            </summary>
            <returns>Returns RFC 2047 'encoded-word' or null if end of stream reached.</returns>
            <exception cref="T:System.InvalidOperationException">Is raised when source stream has no encoded-word at current position.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Reader.QuotedString">
            <summary>
            Reads RFC 822 'quoted-string' from source stream.
            </summary>
            <returns>Returns RFC 822 'quoted-string' or null if end of stream reached.</returns>
            <exception cref="T:System.InvalidOperationException">Is raised when source stream has no quoted-string at current position.</exception>
            <exception cref="T:System.ArgumentException">Is raised when not valid 'quoted-string'.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Reader.Value">
            <summary>
            Reads RFC 2045 (section 5) 'token' from source stream.
            </summary>
            <returns>Returns 2045 (section 5) 'token' or null if end of stream reached.</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Reader.Phrase">
            <summary>
            Reads RFC 2047 (section 5) 'phrase' from source stream.
            </summary>
            <returns>Returns RFC 2047 (section 5) 'phrase' or null if end of stream reached.</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Reader.Text">
            <summary>
            Reads RFC 822 '*text' from source stream.
            </summary>
            <returns>Returns RFC 822 '*text' or null if end of stream reached.</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Reader.ToFirstChar">
            <summary>
            Reads all white-space chars + CR and LF.
            </summary>
            <returns>Returns readed chars.</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Reader.Char(System.Boolean)">
            <summary>
            Reads 1 char from source stream.
            </summary>
            <param name="readToFirstChar">Specifies if postion is moved to char(skips white spaces).</param>
            <returns>Returns readed char or -1 if end of stream reached.</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Reader.Peek(System.Boolean)">
            <summary>
            Shows next char in source stream, this method won't consume that char.
            </summary>
            <param name="readToFirstChar">Specifies if postion is moved to char(skips white spaces).</param>
            <returns>Returns next char in source stream, returns -1 if end of stream.</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Reader.StartsWith(System.String)">
            <summary>
            Gets if source stream valu starts with the specified value. Compare is case-insensitive.
            </summary>
            <param name="value">Value to check.</param>
            <returns>Returns true if source steam satrs with specified string.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Reader.ToEnd">
            <summary>
            Reads all data from current postion to the end.
            </summary>
            <returns>Retruns readed data. Returns null if end of string is reached.</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Reader.IsAlpha(System.Char)">
            <summary>
            Gets if the specified char is RFC 822 'ALPHA'.
            </summary>
            <param name="c">Char to check.</param>
            <returns>Returns true if specified char is RFC 822 'ALPHA'.</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Reader.IsAText(System.Char)">
            <summary>
            Gets if the specified char is RFC 2822 'atext'.
            </summary>
            <param name="c">Char to check.</param>
            <returns>Returns true if specified char is RFC 2822 'atext'.</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Reader.IsDotAtom(System.String)">
            <summary>
            Gets if the specified value can be represented as "dot-atom".
            </summary>
            <param name="value">Value to check.</param>
            <returns>Returns true if the specified value can be represented as "dot-atom".</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Reader.IsToken(System.String)">
            <summary>
            Gets if specified valu is RFC 2045 (section 5) 'token'.
            </summary>
            <param name="text">Text to check.</param>
            <returns>Returns true if specified char is RFC 2045 (section 5) 'token'.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>text</b> is null.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Reader.IsToken(System.Char)">
            <summary>
            Gets if the specified char is RFC 2045 (section 5) 'token'.
            </summary>
            <param name="c">Char to check.</param>
            <returns>Returns true if specified char is RFC 2045 (section 5) 'token'.</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Reader.IsAttributeChar(System.Char)">
            <summary>
            Gets if the specified char is RFC 2231 (section 7) 'attribute-char'.
            </summary>
            <param name="c">Char to check.</param>
            <returns>Returns true if specified char is RFC 2231 (section 7) 'attribute-char'.</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Reader.ReadParenthesized">
            <summary>
            Reads parenthesized value. Supports {},(),[],&lt;&gt; parenthesis. 
            Throws exception if there isn't parenthesized value or closing parenthesize is missing.
            </summary>
            <returns>Returns value between parenthesized.</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Reader.QuotedReadToDelimiter(System.Char[])">
            <summary>
            Reads string to specified delimiter or to end of underlying string. Notes: Delimiters in quoted string is skipped. 
            For example: delimiter = ',', text = '"aaaa,eee",qqqq' - then result is '"aaaa,eee"'.
            </summary>
            <param name="delimiters">Data delimiters.</param>
            <returns>Returns readed string or null if end of string reached.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>delimiters</b> is null reference.</exception>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_Reader.Available">
            <summary>
            Gets number of chars has left for processing.
            </summary>
        </member>
        <member name="P:com.verion.uniapi.MIME.MIME_Reader.Position">
            <summary>
            Gets position in string.
            </summary>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_TransferEncodings">
            <summary>
            This class holds MIME content transfer encodings. Defined in RFC 2045 6.
            </summary>
        </member>
        <member name="F:com.verion.uniapi.MIME.MIME_TransferEncodings.SevenBit">
            <summary>
            Up to 998 octets per line of the code range 1..127 with CR and LF (codes 13 and 10 respectively) only allowed to 
            appear as part of a CRLF line ending. This is the default value.
            Defined in RFC 2045 6.2.
            </summary>
        </member>
        <member name="F:com.verion.uniapi.MIME.MIME_TransferEncodings.EightBit">
            <summary>
            Up to 998 octets per line with CR and LF (codes 13 and 10 respectively) only allowed to appear as part of a CRLF line ending.
            Defined in RFC 2045 6.2.
            </summary>
        </member>
        <member name="F:com.verion.uniapi.MIME.MIME_TransferEncodings.QuotedPrintable">
            <summary>
            Used to encode arbitrary octet sequences into a form that satisfies the rules of 7bit. 
            Designed to be efficient and mostly human readable when used for text data consisting primarily of US-ASCII characters 
            but also containing a small proportion of bytes with values outside that range.
            Defined in RFC 2045 6.7.
            </summary>
        </member>
        <member name="F:com.verion.uniapi.MIME.MIME_TransferEncodings.Base64">
            <summary>
            Used to encode arbitrary octet sequences into a form that satisfies the rules of 7bit. Has a fixed overhead and is 
            intended for non text data and text that is not ASCII heavy.
            Defined in RFC 2045 6.8.
            </summary>
        </member>
        <member name="F:com.verion.uniapi.MIME.MIME_TransferEncodings.Binary">
            <summary>
            Any sequence of octets. This type is not widely used. Defined in RFC 3030.
            </summary>
        </member>
        <member name="T:com.verion.uniapi.MIME.MIME_Utils">
            <summary>
            Provides MIME related utility methods.
            </summary>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Utils.DateTimeToRfc2822(System.DateTime)">
            <summary>
            Converts date to RFC 2822 date time string.
            </summary>
            <param name="dateTime">Date time value to convert..</param>
            <returns>Returns RFC 2822 date time string.</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Utils.ParseRfc2822DateTime(System.String)">
            <summary>
            Parses RFC 2822 date-time from the specified value.
            </summary>
            <param name="value">RFC 2822 date-time string value.</param>
            <returns>Returns parsed datetime value.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Utils.UnfoldHeader(System.String)">
            <summary>
            Unfolds folded header field.
            </summary>
            <param name="value">Header field.</param>
            <returns>Returns unfolded header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Utils.CreateMessageID">
            <summary>
            Creates Rfc 2822 3.6.4 message-id. Syntax: '&lt;' id-left '@' id-right '&gt;'.
            Update: ETSI 102 640 syntax changed. New Syntax:'&lt;' id-left '@' id-right . domainname'&gt;'.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Utils.ParseHeaders(System.IO.Stream)">
            <summary>
            Parses headers from message or mime entry.
            </summary>
            <param name="entryStrm">Stream from where to read headers.</param>
            <returns>Returns header lines.</returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Utils.ParseHeaderField(System.String,System.IO.Stream)">
            <summary>
            Parse header specified header field value.
            
            Use this method only if you need to get only one header field, otherwise use
            MimeParser.ParseHeaderField(string fieldName,string headers).
            This avoid parsing headers multiple times.
            </summary>
            <param name="fieldName">Header field which to parse. Eg. Subject: .</param>
            <param name="entryStrm">Stream from where to read headers.</param>
            <returns></returns>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Utils.ParseHeaderField(System.String,System.String)">
            <summary>
            Parse header specified header field value.
            </summary>
            <param name="fieldName">Header field which to parse. Eg. Subject: .</param>
            <param name="headers">Full headers string. Use MimeParser.ParseHeaders() to get this value.</param>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Utils.QDecode(System.Text.Encoding,System.String)">
            <summary>
            "Q" decoder. This is same as quoted-printable, except '_' is converted to ' '.
            Defined in RFC 2047 4.2.
            </summary>
            <param name="encoding">Input string encoding.</param>
            <param name="data">String which to encode.</param>
            <returns>Returns decoded string.</returns>		
            <exception cref="T:System.ArgumentNullException">Is raised when <b>encoding</b> or <b>data</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.uniapi.MIME.MIME_Utils.QuotedPrintableDecode(System.Byte[])">
            <summary>
            quoted-printable decoder. Defined in RFC 2045 6.7.
            </summary>
            <param name="data">Data which to encode.</param>
            <returns>Returns decoded data.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null reference.</exception>
        </member>
        <member name="T:com.verion.Net_Utils">
            <summary>
            Common utility methods.
            </summary>
        </member>
        <member name="M:com.verion.Net_Utils.GetLocalHostName(System.String)">
            <summary>
            Gets local host name or argument <b>hostName</b> value if it's specified.
            </summary>
            <param name="hostName">Host name or null.</param>
            <returns>Returns local host name or argument <b>hostName</b> value if it's specified.</returns>
        </member>
        <member name="M:com.verion.Net_Utils.CompareArray(System.Array,System.Array)">
            <summary>
            Compares if specified array itmes equals.
            </summary>
            <param name="array1">Array 1.</param>
            <param name="array2">Array 2</param>
            <returns>Returns true if both arrays are equal.</returns>
        </member>
        <member name="M:com.verion.Net_Utils.CompareArray(System.Array,System.Array,System.Int32)">
            <summary>
            Compares if specified array itmes equals.
            </summary>
            <param name="array1">Array 1.</param>
            <param name="array2">Array 2</param>
            <param name="array2Count">Number of bytes in array 2 used for compare.</param>
            <returns>Returns true if both arrays are equal.</returns>
        </member>
        <member name="M:com.verion.Net_Utils.ReverseArray(System.Array)">
            <summary>
            Reverses the specified array elements.
            </summary>
            <param name="array">Array elements to reverse.</param>
            <returns>Returns array with reversed items.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>array</b> is null.</exception>
        </member>
        <member name="M:com.verion.Net_Utils.ArrayToString(System.String[],System.String)">
            <summary>
            Convert array elements to string.
            </summary>
            <param name="values">String values.</param>
            <param name="delimiter">Values delimiter.</param>
            <returns>Returns array elements as string.</returns>
        </member>
        <member name="M:com.verion.Net_Utils.StreamCopy(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Copies <b>source</b> stream data to <b>target</b> stream.
            </summary>
            <param name="source">Source stream. Reading starts from stream current position.</param>
            <param name="target">Target stream. Writing starts from stream current position.</param>
            <param name="blockSize">Specifies transfer block size in bytes.</param>
            <returns>Returns number of bytes copied.</returns>
        </member>
        <member name="M:com.verion.Net_Utils.CompareIP(System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Compares 2 IP addresses. Returns 0 if IPs are equal, 
            returns positive value if destination IP is bigger than source IP,
            returns negative value if destination IP is smaller than source IP.
            </summary>
            <param name="source">Source IP address.</param>
            <param name="destination">Destination IP address.</param>
            <returns>Returns 0 if IPs are equal, 
            returns positive value if destination IP is bigger than source IP,
            returns negative value if destination IP is smaller than source IP.
            </returns>
        </member>
        <member name="M:com.verion.Net_Utils.IsIPAddress(System.String)">
            <summary>
            Gets if the specified string value is IP address.
            </summary>
            <param name="value">Value to check.</param>
            <returns>Returns true if specified value is IP address.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.Net_Utils.IsMulticastAddress(System.Net.IPAddress)">
            <summary>
            Gets if the specified IP address is multicast address.
            </summary>
            <param name="ip">IP address.</param>
            <returns>Returns true if <b>ip</b> is muticast address, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> s null reference.</exception>
        </member>
        <member name="M:com.verion.Net_Utils.IsPrivateIP(System.String)">
            <summary>
            Gets if specified IP address is private LAN IP address. For example 192.168.x.x is private ip.
            </summary>
            <param name="ip">IP address to check.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null reference.</exception>
            <returns>Returns true if IP is private IP.</returns>
        </member>
        <member name="M:com.verion.Net_Utils.IsPrivateIP(System.Net.IPAddress)">
            <summary>
            Gets if specified IP address is private LAN IP address. For example 192.168.x.x is private ip.
            </summary>
            <param name="ip">IP address to check.</param>
            <returns>Returns true if IP is private IP.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.Net_Utils.ParseIPEndPoint(System.String)">
            <summary>
            Parses IPEndPoint from the specified string value.
            </summary>
            <param name="value">IPEndPoint string value.</param>
            <returns>Returns parsed IPEndPoint.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:com.verion.Net_Utils.IsInteger(System.String)">
            <summary>
            Checks if specified string is integer(int/long).
            </summary>
            <param name="value"></param>
            <returns>Returns true if specified string is integer.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.Net_Utils.IsAscii(System.String)">
            <summary>
            Gets if the specified string is ASCII string.
            </summary>
            <param name="value">String value.</param>
            <returns>Returns true if specified string is ASCII string, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.Net_Utils.IsSocketAsyncSupported">
            <summary>
            Gets if socket async methods supported by OS.
            </summary>
            <returns>returns ture if supported, otherwise false.</returns>
        </member>
        <member name="M:com.verion.Net_Utils.CreateSocket(System.Net.IPEndPoint,System.Net.Sockets.ProtocolType)">
            <summary>
            Creates new socket for the specified end point.
            </summary>
            <param name="localEP">Local end point.</param>
            <param name="protocolType">Protocol type.</param>
            <returns>Retruns newly created socket.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>localEP</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.Net_Utils.ToHex(System.Byte[])">
            <summary>
            Converts specified data to HEX string.
            </summary>
            <param name="data">Data to convert.</param>
            <returns>Returns hex string.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.Net_Utils.ToHex(System.String)">
            <summary>
            Converts specified string to HEX string.
            </summary>
            <param name="text">String to convert.</param>
            <returns>Returns hex string.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>text</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.Net_Utils.FromHex(System.Byte[])">
            <summary>
            Converts hex byte data to normal byte data. Hex data must be in two bytes pairs, for example: 0F,FF,A3,... .
            </summary>
            <param name="hexData">Hex data.</param>
            <returns>Returns decoded data.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>hexData</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.Net_Utils.FromBase64(System.String)">
            <summary>
            Decodes specified base64 data.
            </summary>
            <param name="data">Base64 string.</param>
            <returns>Returns decoded data.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.Net_Utils.FromBase64(System.Byte[])">
            <summary>
            Decodes specified base64 data.
            </summary>
            <param name="data">Base64 data.</param>
            <returns>Returns decoded data.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.Net_Utils.Base64Encode(System.Byte[])">
            <summary>
            Encodes specified data with base64 encoding.
            </summary>
            <param name="data">Data to encode.</param>
            <returns></returns>
        </member>
        <member name="M:com.verion.Net_Utils.Base64EncodeEx(System.Byte[],System.Char[],System.Boolean)">
            <summary>
            Encodes specified data with bas64 encoding.
            </summary>
            <param name="data">Data to to encode.</param>
            <param name="base64Chars">Custom base64 chars (64 chars) or null if default chars used.</param>
            <param name="padd">Padd missing block chars. Normal base64 must be 4 bytes blocks, if not 4 bytes in block, 
            missing bytes must be padded with '='. Modified base64 just skips missing bytes.</param>
            <returns></returns>
        </member>
        <member name="M:com.verion.Net_Utils.Base64DecodeEx(System.Byte[],System.Char[])">
            <summary>
            Decodes base64 data. Defined in RFC 2045 6.8.  Base64 Content-Transfer-Encoding.
            </summary>
            <param name="base64Data">Base64 decoded data.</param>
            <param name="base64Chars">Custom base64 chars (64 chars) or null if default chars used.</param>
            <returns></returns>
        </member>
        <member name="M:com.verion.Net_Utils.ComputeMd5(System.String,System.Boolean)">
            <summary>
            Computes md5 hash.
            </summary>
            <param name="text">Text to hash.</param>
            <param name="hex">Specifies if md5 value is returned as hex string.</param>
            <returns>Returns md5 value or md5 hex value.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>text</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.Net_Utils.IsIoCompletionPortsSupported">
            <summary>
            Gets if IO completion ports supported by OS.
            </summary>
            <returns></returns>
        </member>
        <member name="T:com.verion.ParseException">
            <summary>
            This exception is thrown when parse errors are encountered.
            </summary>
        </member>
        <member name="M:com.verion.ParseException.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:com.verion.StringReader">
            <summary>
            String reader.
            </summary>
        </member>
        <member name="M:com.verion.StringReader.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="source">Source string.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>source</b> is null.</exception>
        </member>
        <member name="M:com.verion.StringReader.AppendString(System.String)">
            <summary>
            Appends specified string to SourceString.
            </summary>
            <param name="value">String value to append.</param>
        </member>
        <member name="M:com.verion.StringReader.ReadToFirstChar">
            <summary>
            Reads to first char, skips white-space(SP,VTAB,HTAB,CR,LF) from the beginning of source string.
            </summary>
            <returns>Returns white-space chars which was readed.</returns>
        </member>
        <member name="M:com.verion.StringReader.ReadSpecifiedLength(System.Int32)">
            <summary>
            Reads string with specified length. Throws exception if read length is bigger than source string length.
            </summary>
            <param name="length">Number of chars to read.</param>
            <returns></returns>
        </member>
        <member name="M:com.verion.StringReader.QuotedReadToDelimiter(System.Char)">
            <summary>
            Reads string to specified delimiter or to end of underlying string. Notes: Delimiter in quoted string is skipped.
            Delimiter is removed by default.
            For example: delimiter = ',', text = '"aaaa,eee",qqqq' - then result is '"aaaa,eee"'.
            </summary>
            <param name="delimiter">Data delimiter.</param>
            <returns></returns>
        </member>
        <member name="M:com.verion.StringReader.QuotedReadToDelimiter(System.Char[])">
            <summary>
            Reads string to specified delimiter or to end of underlying string. Notes: Delimiters in quoted string is skipped.
            Delimiter is removed by default.
            For example: delimiter = ',', text = '"aaaa,eee",qqqq' - then result is '"aaaa,eee"'.
            </summary>
            <param name="delimiters">Data delimiters.</param>
            <returns></returns>
        </member>
        <member name="M:com.verion.StringReader.QuotedReadToDelimiter(System.Char[],System.Boolean)">
            <summary>
            Reads string to specified delimiter or to end of underlying string. Notes: Delimiters in quoted string is skipped. 
            For example: delimiter = ',', text = '"aaaa,eee",qqqq' - then result is '"aaaa,eee"'.
            </summary>
            <param name="delimiters">Data delimiters.</param>
            <param name="removeDelimiter">Specifies if delimiter is removed from underlying string.</param>
            <returns></returns>
        </member>
        <member name="M:com.verion.StringReader.ReadWord">
            <summary>
            Reads word from string. Returns null if no word is available.
            Word reading begins from first char, for example if SP"text", then space is trimmed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.verion.StringReader.ReadWord(System.Boolean)">
            <summary>
            Reads word from string. Returns null if no word is available.
            Word reading begins from first char, for example if SP"text", then space is trimmed.
            </summary>
            <param name="unQuote">Specifies if quoted string word is unquoted.</param>
            <returns></returns>
        </member>
        <member name="M:com.verion.StringReader.ReadWord(System.Boolean,System.Char[],System.Boolean)">
            <summary>
            Reads word from string. Returns null if no word is available.
            Word reading begins from first char, for example if SP"text", then space is trimmed.
            </summary>
            <param name="unQuote">Specifies if quoted string word is unquoted.</param>
            <param name="wordTerminatorChars">Specifies chars what terminate word.</param>
            <param name="removeWordTerminator">Specifies if work terminator is removed.</param>
            <returns></returns>
        </member>
        <member name="M:com.verion.StringReader.ReadParenthesized">
            <summary>
            Reads parenthesized value. Supports {},(),[],&lt;&gt; parenthesis. 
            Throws exception if there isn't parenthesized value or closing parenthesize is missing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.verion.StringReader.ReadToEnd">
            <summary>
            Reads all remaining string, returns null if no chars left to read.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.verion.StringReader.RemoveFromEnd(System.Int32)">
            <summary>
            Removes specified count of chars from the end of the source string.
            </summary>
            <param name="count">Char count.</param>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:com.verion.StringReader.StartsWith(System.String)">
            <summary>
            Gets if source string starts with specified value. Compare is case-sensitive.
            </summary>
            <param name="value">Start string value.</param>
            <returns>Returns true if source string starts with specified value.</returns>
        </member>
        <member name="M:com.verion.StringReader.StartsWith(System.String,System.Boolean)">
            <summary>
            Gets if source string starts with specified value.
            </summary>
            <param name="value">Start string value.</param>
            <param name="case_sensitive">Specifies if compare is case-sensitive.</param>
            <returns>Returns true if source string starts with specified value.</returns>
        </member>
        <member name="M:com.verion.StringReader.EndsWith(System.String)">
            <summary>
            Gets if source string ends with specified value. Compare is case-sensitive.
            </summary>
            <param name="value">Start string value.</param>
            <returns>Returns true if source string ends with specified value.</returns>
        </member>
        <member name="M:com.verion.StringReader.EndsWith(System.String,System.Boolean)">
            <summary>
            Gets if source string ends with specified value.
            </summary>
            <param name="value">Start string value.</param>
            <param name="case_sensitive">Specifies if compare is case-sensitive.</param>
            <returns>Returns true if source string ends with specified value.</returns>
        </member>
        <member name="M:com.verion.StringReader.StartsWithWord">
            <summary>
            Gets if current source string starts with word. For example if source string starts with
            whiter space or parenthesize, this method returns false.
            </summary>
            <returns></returns>
        </member>
        <member name="P:com.verion.StringReader.Available">
            <summary>
            Gets how many chars are available for reading.
            </summary>
        </member>
        <member name="P:com.verion.StringReader.OriginalString">
            <summary>
            Gets original string passed to class constructor.
            </summary>
        </member>
        <member name="P:com.verion.StringReader.SourceString">
            <summary>
            Gets currently remaining string.
            </summary>
        </member>
        <member name="P:com.verion.StringReader.Position">
            <summary>
            Gets position in original string.
            </summary>
        </member>
        <member name="T:com.verion.TextUtils">
            <summary>
            This class provides usefull text methods.
            </summary>
        </member>
        <member name="M:com.verion.TextUtils.QuoteString(System.String)">
            <summary>
            Qoutes string and escapes fishy('\',"') chars.
            </summary>
            <param name="text">Text to quote.</param>
            <returns></returns>
        </member>
        <member name="M:com.verion.TextUtils.UnQuoteString(System.String)">
            <summary>
            Unquotes and unescapes escaped chars specified text. For example "xxx" will become to 'xxx', "escaped quote \"", will become to escaped 'quote "'.
            </summary>
            <param name="text">Text to unquote.</param>
            <returns></returns>
        </member>
        <member name="M:com.verion.TextUtils.EscapeString(System.String,System.Char[])">
            <summary>
            Escapes specified chars in the specified string.
            </summary>
            <param name="text">Text to escape.</param>
            <param name="charsToEscape">Chars to escape.</param>
        </member>
        <member name="M:com.verion.TextUtils.UnEscapeString(System.String)">
            <summary>
            Unescapes all escaped chars.
            </summary>
            <param name="text">Text to unescape.</param>
            <returns></returns>
        </member>
        <member name="M:com.verion.TextUtils.SplitQuotedString(System.String,System.Char)">
            <summary>
            Splits string into string arrays. This split method won't split qouted strings, but only text outside of qouted string.
            For example: '"text1, text2",text3' will be 2 parts: "text1, text2" and text3.
            </summary>
            <param name="text">Text to split.</param>
            <param name="splitChar">Char that splits text.</param>
            <returns></returns>
        </member>
        <member name="M:com.verion.TextUtils.SplitQuotedString(System.String,System.Char,System.Boolean)">
            <summary>
            Splits string into string arrays. This split method won't split qouted strings, but only text outside of qouted string.
            For example: '"text1, text2",text3' will be 2 parts: "text1, text2" and text3.
            </summary>
            <param name="text">Text to split.</param>
            <param name="splitChar">Char that splits text.</param>
            <param name="unquote">If true, splitted parst will be unqouted if they are qouted.</param>
            <returns></returns>
        </member>
        <member name="M:com.verion.TextUtils.SplitQuotedString(System.String,System.Char,System.Boolean,System.Int32)">
            <summary>
            Splits string into string arrays. This split method won't split qouted strings, but only text outside of qouted string.
            For example: '"text1, text2",text3' will be 2 parts: "text1, text2" and text3.
            </summary>
            <param name="text">Text to split.</param>
            <param name="splitChar">Char that splits text.</param>
            <param name="unquote">If true, splitted parst will be unqouted if they are qouted.</param>
            <param name="count">Maximum number of substrings to return.</param>
            <returns>Returns splitted string.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>text</b> is null reference.</exception>
        </member>
        <member name="M:com.verion.TextUtils.QuotedIndexOf(System.String,System.Char)">
            <summary>
            Gets first index of specified char. The specified char in quoted string is skipped.
            Returns -1 if specified char doesn't exist.
            </summary>
            <param name="text">Text in what to check.</param>
            <param name="indexChar">Char what index to get.</param>
            <returns></returns>
        </member>
        <member name="M:com.verion.TextUtils.SplitString(System.String,System.Char)">
            <summary>
            Splits string into string arrays.
            </summary>
            <param name="text">Text to split.</param>
            <param name="splitChar">Char Char that splits text.</param>
            <returns></returns>
        </member>
        <member name="M:com.verion.TextUtils.IsToken(System.String)">
            <summary>
            Gets if specified string is valid "token" value.
            </summary>
            <param name="value">String value to check.</param>
            <returns>Returns true if specified string value is valid "token" value.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised if <b>value</b> is null.</exception>
        </member>
        <member name="T:com.verion.StreamLineReader">
            <summary>
            Stream line reader.
            </summary>
        </member>
        <member name="M:com.verion.StreamLineReader.#ctor(System.IO.Stream)">
            <summary>
            Default constructor.
            </summary>
            <param name="strmSource">Source stream from where to read data. Reading begins from stream current position.</param>
        </member>
        <member name="M:com.verion.StreamLineReader.ReadLine">
            <summary>
            Reads byte[] line from stream. NOTE: Returns null if end of stream reached.
            </summary>
            <returns>Return null if end of stream reached.</returns>
        </member>
        <member name="M:com.verion.StreamLineReader.ReadLineString">
            <summary>
            Reads string line from stream. String is converted with specified Encoding property from byte[] line. NOTE: Returns null if end of stream reached.
            </summary>
            <returns></returns>
        </member>
        <member name="P:com.verion.StreamLineReader.Encoding">
            <summary>
            Gets or sets charset encoding to use for string based methods. Default("") encoding is system default encoding.
            </summary>
        </member>
        <member name="P:com.verion.StreamLineReader.CRLF_LinesOnly">
            <summary>
            Gets or sets if lines must be CRLF terminated or may be only LF terminated too.
            </summary>
        </member>
        <member name="T:kepApi.Properties.Resources">
            <summary>
              Yerelleştirilmiş dizeleri aramak gibi işlemler için, türü kesin olarak belirtilmiş kaynak sınıfı.
            </summary>
        </member>
        <member name="P:kepApi.Properties.Resources.ResourceManager">
            <summary>
              Bu sınıf tarafından kullanılan, önbelleğe alınmış ResourceManager örneğini döndürür.
            </summary>
        </member>
        <member name="P:kepApi.Properties.Resources.Culture">
            <summary>
              Tümü için geçerli iş parçacığının CurrentUICulture özelliğini geçersiz kular
              CurrentUICulture özelliğini tüm kaynak aramaları için geçersiz kılar.
            </summary>
        </member>
    </members>
</doc>
